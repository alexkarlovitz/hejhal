/*
This file contains PARI code to run Hejhal's algorithm on infinite
covolume, discrete groups acting on hyperbolic 3-space.
*/

/*
We assume the group admits no cusps, so the only portions of a fundamental
domain on the boundary are infinite volume pieces. These can therefore be
converted into flare domains.
*/

/* Author: Alex Karlovitz */

/**********************************************************************
  Special functions (from Andreas Strombergsson)
**********************************************************************/

/* See def in GR, 9.100. We sum up to and including the z^N-term.
 Chooses N by the following (completely ad hoc and sloppy heuristic)
 method: Stop when p has decreased >= 10 times in a row and |p|<re*|s|. */

hypergeom(a,b,c,z)=
{
  local(s,p,pp,n,r,re,prec);

  /* re: Desired relative error bound for hypergeom function.
     Let's make it correspond to current precision. */
  prec = default(realprecision);
  re = 10^(-prec);

  s=1;
  p=1;
  r=0;
  n=0;
  while(1,
    pp=(a+n)*(b+n)/((c+n)*(1+n))*z;
    if (abs(pp)<1, r++, r=0);
    p=p*pp;
    s+=p;
    if ((r>=10 && abs(p)<re*abs(s)), return(s););
    n++;
  );
  s;
}

/**********************************************************************
  Whittaker functions
**********************************************************************/

/* Whittaker function in the flare expansion */
flare_Whitt(thet, phi, m, n, s, kappa)=
{
  TODO;
}

/**********************************************************************
  Quaternion Operations
**********************************************************************/

/*
We use the 4-vector [x1, x2, y, z] to represent the quaternion
    x1 + x2i + yj + zk
*/

/* addition */
Qadd(q, r)=
{
  [q[1] + r[1], q[2] + r[2], q[3] + r[3], q[4] + r[4]];
}

/* constant multiplication */
Qc(c, q)=
{
  [c*q[1], c*q[2], c*q[3], c*q[4]];
}

/* multiplication */
Qmult(q, r)=
{
  [q[1]*r[1] - q[2]*r[2] - q[3]*r[3] - q[4]*r[4],
   q[1]*r[2] + q[2]*r[1] + q[3]*r[4] - q[4]*r[3],
   q[1]*r[3] - q[2]*r[4] + q[3]*r[1] + q[4]*r[2],
   q[1]*r[4] + q[2]*r[3] - q[3]*r[2] + q[4]*r[1]];
}

/* norm */
Qnorm(q)=
{
  sqrt(q[1]^2 + q[2]^2 + q[3]^2 + q[4]^2);
}

/* bar */
Qbar(q)=
{
  [q[1], -q[2], -q[3], -q[4]];
}

/* division */
Qdiv(q, r)=
{
  Qc(1/Qnorm(r)^2, Qmult(q, Qbar(r)));
}

/*
Note: we use the identification of H3 with k-free quaternions. Specifically,
we will use the 3-vector [x1, x2, y] with y > 0 to represent both the point
(x1, x2, y) in 3-space and the quaternion
    x1 + x2i + yj
*/

/*
Computes mobius transformation defined by A applied to the k-free quaternion z
*/
mobius(A, z)=
{
  local(q, num, den, Aq);

  /* make quaternion in place of k-free quaternion */
  q = concat(z, 0);

  /* apply A to q */
  num = Qadd(Qmult([real(A[1][1]), imag(A[1][1]), 0, 0], q),
             [real(A[1][2]), imag(A[1][2]), 0, 0]);
  den = Qadd(Qmult([real(A[2][1]), imag(A[2][1]), 0, 0], q),
             [real(A[2][2]), imag(A[2][2]), 0, 0]);
  Aq = Qdiv(num, den);

  /* return k-free number */
  return(Aq[1..3]);
}

/**********************************************************************
  Upper half space model functions
**********************************************************************/

/*
Pullback to fundamental domain; the algorithm we use is
  - first, if x2 < 1/2, apply A; for rest of algorithm, point will have x2 >= 1/2
  - now repeat
    - use T to map real part between -1/2 and 1/2
    - if |z| >= 1, done
    - else, apply S
*/
pullback_Ap(z_start)=
{
  local(z, prec, re, S);

  S = [[0, -1], [1, 0]];

  /* count points within 5re as the same */
  prec = default(realprecision);
  re = 10^(-prec);

  /* first map to x2 >= 1/2 */
  if(z_start[2] < 1/2,
    z_start[1] = -z_start[1];
    z_start[2] = -z_start[2] + 1;
  );

  /* keep track of starting point */
  z = z_start;

  /* now the repeat step */
  while(1,

    /* put real part in -1/2 to 1/2 */
    z[1] -= round(z[1]);

    /* if |z| > 1, done; else, map by S */
    if(z[1]^2 + z[2]^2 + z[3]^2 >= 1,
      return(z),
      z = mobius(S, z)
    );

    /* if we ever end back at z_start, in an infinite loop */
    if(abs(z[1] - z_start[1]) + abs(z[2] - z_start[2]) + abs(z[3] - z_start[3]) <= 5*re,
      print("Warning: pullback algorithm for "z_start" returned to self.");
      return(z_start);
    );

  );
}

/*
Map from flare domain to original domain
*/
hyp_to_true(rho, th, z1, z2, t) =
{
  TODO;
}

/*
Map from original domain to flare domain
*/
true_to_hyp(z, z1, z2, t)=
{
  TODO;
}

/**********************************************************************
  Linear algebra algorithm (from Strombergsson)
**********************************************************************/

/*
 To utilize as much information as possible, we will typically be looking
 at a linear system with more equations than variables. In particular, we
 have a system of the type "A*x=0", where x is the sought for M-dimensional
 vector of Fourier coefficients, and A is an N*M-matrix where N>=M-1
 is the number of given points. Of course, since typically N should be
 much larger than M, it will be impossible to find an EXACT solution x
 to "A*x=0". Instead we seek x so as to MINIMIZE |A*x| (Euclidean norm).
 for some given normalization of x. Perhaps the most natural normalization
 of x would be |x|=1; however here we instead normalize by setting
 x[1]=1. Thus, since |A*x|^2=x^t*AA*x with AA:=A^t*A (an M*M-matrix), it
 turns out that we wish to find that vector x which satisfies x[1]=1 and
 AA'*x=0, where AA' is the (M-1)*M-matrix obtained by removing the top row
 from AA. We find this vector x using Gauss elimination, via solve_sys.
*/

/*
 The following routine solves a linear system of equations using
 Gauss elimination. Of course we could instead have tried to make
 use of some built-in PARI routine, but we wanted to have maximal
 control. Actually the routine below is a very downscaled version
 of a much longer routine, which e.g. allows a higher dimensional
 solution space (e.g. when looking for holomorphic modular forms)
 and also allows some "tricks", e.g. to have available more
 equations than are actually used in the end, so that in each new
 j-iteration we seek among more than one row to find a good pivot.
 (This is probably humbug to any expert in numerical linear algebra,
 but it has been found to work well in practice when dealing with a
 higher dimensional space of holomorphic modular forms.) Anyway,
 I have taken this away below since I doubt it would be useful for
 the problem we are now discussing.)
*/

/*
 Solve the homogeneous system of equations whose coefficients are
 given by AA using Gauss elimination.
 cfree is the index of the column which should be kept as a free variable.
*/
solve_sys(AA, cfree)=
{
  local(Nequ, Nu, c, maxc, maxk, columninfo, j, k, A, N, jj);

  /* get number of equations and variables */
  Nequ = matsize(AA)[2];
  Nu = matsize(AA[1])[2];

  /* We maintain  columninfo  so that
    columninfo[k] = j   if column k has been used as pivot column and
                          the corresponding "1" is in row j.
                  = -1  if column k has not yet been used as pivot. */
  columninfo=vector(Nu,k,-1);

  /* loop through rows */
  for(j=1,Nequ,
    /* Find the coefficient of largest absolute value in row number j. */
    maxc=0; maxk=-1;
    for(k=1,Nu, if((k!=cfree),
      c=abs(AA[j][k]); if((c>maxc), maxk=k; maxc=c;);
    ););
    if((maxk==-1), error("In solveequsyst; unexpected linear dependence "j););

    /* Divide all coefficients in row j  with  AA[j,maxk]. */
    A=1/AA[j][maxk];
    AA[j]=A*AA[j];
    AA[j][maxk]=1;    /* EXACT 1, not "1.000000000023", say! */

    /* Update columninfo. */
    columninfo[maxk]=j;

    /* Subtract row j from all other rows. */
    for(N=1,Nequ,
      if(N != j,
        A=AA[N][maxk];
        AA[N] = AA[N]-A*AA[j];
        AA[N][maxk]=0;   /* EXACT 0, not "0.0E-10", say! */
      );
    );
  );

  /* Return the solution vector. */
  vector(Nu, k, if(k==cfree, 1, -AA[columninfo[k]][cfree]));
}

/**********************************************************************
  Code for setting up and solving linear system
**********************************************************************/

/*
Sets up matrix of equations for list of test points z
  - use only the flare expansion
    - if test point is in fundamental domain, error
    - else, compare expansion at pullback
  - lambda = s(2 - s)
  - only use flare expansion if test point has argument <= alpha0
  - M - number of coefficients to take in the flare expansion
*/
init_eqns(zs, s, alpha0, M, circles, z1, z2, t, pre_kappa)=
{
  TODO;
}

/*
Given a set of test points zs, set up and solve linear system for the Fourier
coefficients.
  - s - assumed eigenvalue is lambda = s(2 - s)
  - only use flare expansion if test point has argument <= alpha0
  - M - number of coefficients to take in the flare expansion
*/
get_coefficients(zs, s, alpha0, M, circles, z1, z2, t, pre_kappa)=
{
  TODO;
}

/**********************************************************************
  Actual loops for Hejhal's algorithm
**********************************************************************/

/*
Runs a "secant method version" of Hejhal's algorithm (learned from
Strombergsson)
  - s - assumed eigenvalue is lambda = s(2 - s)
  - only use flare expansion if test point has argument <= alpha0
  - M - number of coefficients to take in the flare expansion
*/
secant_method(zs1, zs2, alpha0, M, circles, z1, z2, t, pre_kappa, s, delta)=
{
  TODO;
}
