/*
This file contains PARI code to run Hejhal's algorithm on infinite
covolume, discrete groups acting on hyperbolic 3-space.
*/

/*
We assume the group admits no cusps, so the only portions of a fundamental
domain on the boundary are infinite volume pieces. These can therefore be
converted into flare domains.
*/

/* Author: Alex Karlovitz */

/**********************************************************************
  Special functions (from Andreas Strombergsson)
**********************************************************************/

/* See def in GR, 9.100. We sum up to and including the z^N-term.
 Chooses N by the following (completely ad hoc and sloppy heuristic)
 method: Stop when p has decreased >= 10 times in a row and |p|<re*|s|. */

hypergeom(a,b,c,z)=
{
  local(s,p,pp,n,r,re,prec);

  /* re: Desired relative error bound for hypergeom function.
     Let's make it correspond to current precision. */
  prec = default(realprecision);
  re = 10^(-prec);

  s=1;
  p=1;
  r=0;
  n=0;
  while(1,
    pp=(a+n)*(b+n)/((c+n)*(1+n))*z;
    if (abs(pp)<1, r++, r=0);
    p=p*pp;
    s+=p;
    if ((r>=10 && abs(p)<re*abs(s)), return(s););
    n++;
  );
  s;
}

/**********************************************************************
  Whittaker functions
**********************************************************************/

/* Whittaker function in the flare expansion (see the Mathematica file
   Misc/TransformedSpherical.nb for the computation) */
flare_Whitt(phi, m, n, s, kappa)=
{
  N = n*Pi/log(kappa);
  cos(phi)^s*real(sin(phi)^(-m*I)*hypergeom(s/2 - m*I/2 - I*N,
        s/2 - m*I/2 + I*N, s, cos(phi)^2));
}

/**********************************************************************
  Quaternion Operations
**********************************************************************/

/*
We use the 4-vector [x1, x2, y, z] to represent the quaternion
    x1 + x2i + yj + zk
*/

/* addition */
Qadd(q, r)=
{
  [q[1] + r[1], q[2] + r[2], q[3] + r[3], q[4] + r[4]];
}

/* constant multiplication */
Qc(c, q)=
{
  [c*q[1], c*q[2], c*q[3], c*q[4]];
}

/* multiplication */
Qmult(q, r)=
{
  [q[1]*r[1] - q[2]*r[2] - q[3]*r[3] - q[4]*r[4],
   q[1]*r[2] + q[2]*r[1] + q[3]*r[4] - q[4]*r[3],
   q[1]*r[3] - q[2]*r[4] + q[3]*r[1] + q[4]*r[2],
   q[1]*r[4] + q[2]*r[3] - q[3]*r[2] + q[4]*r[1]];
}

/* norm */
Qnorm(q)=
{
  sqrt(q[1]^2 + q[2]^2 + q[3]^2 + q[4]^2);
}

/* bar */
Qbar(q)=
{
  [q[1], -q[2], -q[3], -q[4]];
}

/* division */
Qdiv(q, r)=
{
  Qc(1/Qnorm(r)^2, Qmult(q, Qbar(r)));
}

/*
Note: we use the identification of H3 with k-free quaternions. Specifically,
we will use the 3-vector [x1, x2, y] with y > 0 to represent both the point
(x1, x2, y) in 3-space and the quaternion
    x1 + x2i + yj
*/

/*
Computes mobius transformation defined by A applied to the k-free quaternion z
*/
mobius(A, z)=
{
  local(q, num, den, Aq);

  /* make quaternion in place of k-free quaternion */
  q = concat(z, 0);

  /* apply A to q */
  num = Qadd(Qmult([real(A[1][1]), imag(A[1][1]), 0, 0], q),
             [real(A[1][2]), imag(A[1][2]), 0, 0]);
  den = Qadd(Qmult([real(A[2][1]), imag(A[2][1]), 0, 0], q),
             [real(A[2][2]), imag(A[2][2]), 0, 0]);
  Aq = Qdiv(num, den);

  /* return k-free number */
  return(Aq[1..3]);
}

/**********************************************************************
  Upper half space model functions
**********************************************************************/

/*
Pullback to fundamental domain; the algorithm we use is
  - first, if x2 < 1/2, apply A; for rest of algorithm, point will have x2 >= 1/2
  - now repeat
    - use T to map real part between -1/2 and 1/2
    - if |z| >= 1, done
    - else, apply S
*/
pullback_Ap(z_start)=
{
  local(z, prec, re, S);

  S = [[0, -1], [1, 0]];

  /* count points within 5re as the same */
  prec = default(realprecision);
  re = 10^(-prec);

  /* first map to x2 >= 1/2 */
  if(z_start[2] < 1/2,
    z_start[1] = -z_start[1];
    z_start[2] = -z_start[2] + 1;
  );

  /* keep track of starting point */
  z = z_start;

  /* now the repeat step */
  while(1,

    /* put real part in -1/2 to 1/2 */
    z[1] -= round(z[1]);

    /* if |z| > 1, done; else, map by S */
    if(z[1]^2 + z[2]^2 + z[3]^2 >= 1,
      return(z),
      z = mobius(S, z)
    );

    /* if we ever end back at z_start, in an infinite loop */
    if(abs(z[1] - z_start[1]) + abs(z[2] - z_start[2]) + abs(z[3] - z_start[3]) <= 5*re,
      print("Warning: pullback algorithm for "z_start" returned to self.");
      return(z_start);
    );

  );
}

/*
Map from original domain to flare domain
*/
true_to_hyp(z)=
{
  local(P, Pz, rho, th, phi);

  /* apply map to flare domain */
  P = [[2*sqrt(5), 5 - sqrt(5)],
       [-2*sqrt(5), 5 + sqrt(5)]];
  T = [[1, 1],
       [0, 1]];
  Pz = mobius(P, mobius(T, z));

  /* convert to spherical coordinates */
  rho = sqrt(Pz[1]^2 + Pz[2]^2 + Pz[3]^2);
  th = Pi/2;
  if(Pz[1] == 0,
    if(Pz[2] < 0, th = -Pi/2);
    ,
    if(Pz[1] < 0,
      th = atan(Pz[2]/Pz[1]) + Pi,
      th = atan(Pz[2]/Pz[1])
    );
  );
  phi = acos(Pz[3]/rho);

  [rho, th, phi];
}

/*
Map from flare domain to original domain
*/
hyp_to_true(rho, th, phi) =
{
  local(z, B);

  /* convert to Cartesian coordinates */
  z = [rho*sin(phi)*cos(th),
       rho*sin(phi)*sin(th),
       rho*cos(phi)];

  /* apply map to original domain */
  B = [[-5 - sqrt(5), 5 - sqrt(5)],
       [-2*sqrt(5), -2*sqrt(5)]];
  Tinv = [[1, -1],
          [0, 1]];
  mobius(Tinv, mobius(B, z));
}

/**********************************************************************
  Linear algebra algorithm (from Strombergsson)
**********************************************************************/

/*
 To utilize as much information as possible, we will typically be looking
 at a linear system with more equations than variables. In particular, we
 have a system of the type "A*x=0", where x is the sought for M-dimensional
 vector of Fourier coefficients, and A is an N*M-matrix where N>=M-1
 is the number of given points. Of course, since typically N should be
 much larger than M, it will be impossible to find an EXACT solution x
 to "A*x=0". Instead we seek x so as to MINIMIZE |A*x| (Euclidean norm).
 for some given normalization of x. Perhaps the most natural normalization
 of x would be |x|=1; however here we instead normalize by setting
 x[1]=1. Thus, since |A*x|^2=x^t*AA*x with AA:=A^t*A (an M*M-matrix), it
 turns out that we wish to find that vector x which satisfies x[1]=1 and
 AA'*x=0, where AA' is the (M-1)*M-matrix obtained by removing the top row
 from AA. We find this vector x using Gauss elimination, via solve_sys.
*/

/*
 The following routine solves a linear system of equations using
 Gauss elimination. Of course we could instead have tried to make
 use of some built-in PARI routine, but we wanted to have maximal
 control. Actually the routine below is a very downscaled version
 of a much longer routine, which e.g. allows a higher dimensional
 solution space (e.g. when looking for holomorphic modular forms)
 and also allows some "tricks", e.g. to have available more
 equations than are actually used in the end, so that in each new
 j-iteration we seek among more than one row to find a good pivot.
 (This is probably humbug to any expert in numerical linear algebra,
 but it has been found to work well in practice when dealing with a
 higher dimensional space of holomorphic modular forms.) Anyway,
 I have taken this away below since I doubt it would be useful for
 the problem we are now discussing.)
*/

/*
 Solve the homogeneous system of equations whose coefficients are
 given by AA using Gauss elimination.
 cfree is the index of the column which should be kept as a free variable.
*/
solve_sys(AA, cfree)=
{
  local(Nequ, Nu, c, maxc, maxk, columninfo, j, k, A, N, jj);

  /* get number of equations and variables */
  Nequ = matsize(AA)[2];
  Nu = matsize(AA[1])[2];

  /* We maintain  columninfo  so that
    columninfo[k] = j   if column k has been used as pivot column and
                          the corresponding "1" is in row j.
                  = -1  if column k has not yet been used as pivot. */
  columninfo=vector(Nu,k,-1);

  /* loop through rows */
  for(j=1,Nequ,
    /* Find the coefficient of largest absolute value in row number j. */
    maxc=0; maxk=-1;
    for(k=1,Nu, if((k!=cfree),
      c=abs(AA[j][k]); if((c>maxc), maxk=k; maxc=c;);
    ););
    if((maxk==-1), error("In solveequsyst; unexpected linear dependence "j););

    /* Divide all coefficients in row j  with  AA[j,maxk]. */
    A=1/AA[j][maxk];
    AA[j]=A*AA[j];
    AA[j][maxk]=1;    /* EXACT 1, not "1.000000000023", say! */

    /* Update columninfo. */
    columninfo[maxk]=j;

    /* Subtract row j from all other rows. */
    for(N=1,Nequ,
      if(N != j,
        A=AA[N][maxk];
        AA[N] = AA[N]-A*AA[j];
        AA[N][maxk]=0;   /* EXACT 0, not "0.0E-10", say! */
      );
    );
  );

  /* Return the solution vector. */
  vector(Nu, k, if(k==cfree, 1, -AA[columninfo[k]][cfree]));
}

/**********************************************************************
  Code for setting up and solving linear system
**********************************************************************/

/*
Gets all pairs (m, n) with 0 <= m, n and m + n <= M. Order ascending by sum
then m.
*/
get_pairs(M)=
{
  local(pairs, cntr, S, m);

  /* number of pairs is (M + 2)(M + 1)/2 */
  pairs = vector((M + 2)*(M + 1)/2, x, vector(2));

  /* form all pairs */
  cntr = 1;
  for(S = 0, M,
    for(m = 0, S,
      pairs[cntr][1] = m;
      pairs[cntr][2] = S - m;
      cntr += 1;
    );
  );

  return(pairs);
}

/*
Sets up matrix of equations for list of test points z
  - use only the flare expansion
    - if test point is in fundamental domain, error
    - else, compare expansion at pullback
  - lambda = s(2 - s)
  - TODO: think about if admissibility is a concern
  - M - number of coefficients to take in the flare expansion (we take all m, n
        with 0 <= m, n and m + n <= M)
*/
init_eqns(zs, s, M)=
{
  local(kappa, pairs, P, A, z, zpb, z_flare, zpb_flare, B, Ws, j, m, n, p);

  /* here is the kappa we use for the Apollonian packing */
  kappa = (3 + sqrt(5))/(3 - sqrt(5));

  /* get pairs (m, n) with sum up to M */
  pairs = get_pairs(M);
  P = length(pairs);

  /*
  We assume all test points are taken at the same polar angle, so we only need
  to compute the Whittaker function at this angle once for each pair
  */
  z_flare = true_to_hyp(zs[1]);
  Ws = vector(P);
  for(p = 1, P,
    m = pairs[p][1];
    n = pairs[p][2];
    Ws[p] = flare_Whitt(z_flare[3], m, n, s, kappa);
  );

  /* every point in the vector z must give 1 equation
     - rows of A correspond to equations
     - cols correspond to coefficients (ordering determined by the function
       get_pairs) */
  A = vector(length(zs), x, vector(P));

  /* Loop through all test points */
  for(j = 1, length(zs),
    z = zs[j];
    zpb = pullback_Ap(z);

    /* Check whether point is in fundamental domain */
    if(abs(zpb[1] - z[1]) + abs(zpb[2] - z[2]) + abs(zpb[3] - z[3]) < 10e-10,

      /* Point is IN fundamental domain */
      error("Point "z" is in fundamental domain.");
    ,

      /* Point is NOT in fundamental domain */

      /* Get corresponding points in flare */
      z_flare = true_to_hyp(z);
      zpb_flare = true_to_hyp(zpb);

      /* Check that points have different azimuthal AND polar angles */
      if(abs(z_flare[2] - zpb_flare[2]) < 10e-10,
        error("Point "z" and pullback have same azimuthal angle in flare domain.");
      );
      if(abs(z_flare[3] - zpb_flare[3]) < 10e-10,
        error("Point "z" and pullback have same polar angle in flare domain.");
      );

      /* Add expansion at z_flare and subtract expansion at zpb_flare */
      for(p = 1, P,
        m = pairs[p][1];
        n = pairs[p][2];
        A[j][p] = Ws[p] *
                  cos(m*z_flare[2]) *
                  cos(2*Pi*n*log(z_flare[1])/log(kappa));
        A[j][p] -= flare_Whitt(zpb_flare[3], m, n, s, kappa) *
                   cos(m*zpb_flare[2]) *
                   cos(2*Pi*n*log(zpb_flare[1])/log(kappa));
      );
    );
  );

  /* return a matrix object */
  B = matrix(length(zs), P, k, j, A[k][j]);
  return(B);
}

/*
Given a set of test points zs, set up and solve linear system for the Fourier
coefficients.
  - s - assumed eigenvalue is lambda = s(2 - s)
  - M - number of coefficients to take in the flare expansion (we take all m, n
        with |m|, |n| <= M)
*/
get_coefficients(zs, s, M)=
{
  local(k, A, AA, B, x);

  /* Set up matrix of equations */
  A = init_eqns(zs, s, M);

  /* Use Strombergsson's method for least squares */
  AA = mattranspose(A)*A;
  P = length(A[1,]);
  B = vector(P-1, k, vector(P, j, AA[k+1, j])); /* TODO: double check this! */
  x = solve_sys(B, 1);

  /* return Fourier coefficient vector */
  return(x);
}

/**********************************************************************
  Actual loops for Hejhal's algorithm
**********************************************************************/

/*
Runs a "secant method version" of Hejhal's algorithm (learned from
Strombergsson)
  - s - assumed eigenvalue is lambda = s(2 - s)
  - M - number of coefficients to take in the flare expansion (we take all m, n
        with |m|, |n| <= M)
*/
secant_method(zs1, zs2, M, s, delta)=
{
  local(s_new, c1, c2, j, s_max, s_min, s_mid, delta_new);

  s_new = vector(3); /* REMEMBER TO CHANGE THIS IF YOU CHANGE c1 AND c2 */

  while(1,

    /* Get differences of some Fourier coefficients for s */
    x1 = get_coefficients(zs1, s, M);
    x2 = get_coefficients(zs2, s, M);
    c1 = [x1[2] - x2[2], x1[3] - x2[3], x1[4] - x2[4]];

    /* Now do the same for s + delta */
    x1 = get_coefficients(zs1, s + delta, M);
    x2 = get_coefficients(zs2, s + delta, M);
    c2 = [x1[2] - x2[2], x1[3] - x2[3], x1[4] - x2[4]];

    /* Run one iteration of secant method on each difference */
    s_max = 0.0; s_min = 100.0;
    for(j = 1, length(c1),
      s_new[j] = (c1[j]*(s+delta) - c2[j]*s)/(c1[j] - c2[j]);
      s_max = max(s_max, s_new[j]);
      s_min = min(s_min, s_new[j]);
    );
    s_mid = 0.5*(s_max + s_min);

    /* Uncomment if you want to print current predictions */
    print("--------------------------------------");
    print("Current predictions:");
    for(j = 1, length(c1), print(s_new[j]));
    print(" ");

    /* Ad hoc check if it's worth continuing */
    delta_new = (s_max - s_min)*5;
    if(delta_new > 0.5*delta,
      print("Approximate error: "s_max-s_min);
      return(s_mid);
    );
    delta = delta_new;
    s = s_mid-0.5*delta;
  );
}
