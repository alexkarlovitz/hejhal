/*
This file contains functions for testing the algorithms in
dirichlet.pari. NOTE: need to run "\r dirichlet.pari"
in gp before running any code in this file, since it assumes those
functions are defined.
*/

/**********************************************************************
  Functions for generating test points
**********************************************************************/

/*
Checks if a test point is admissible. This means the point cannot be in the
fundamental domain, and the point and its pullback must have different arguments
in the flare.
*/
is_admissible(z, Ms, cs, rs)=
{
  local(zpb, zs, zs_pol);

  /* get pullback and convert points to polar */
  zpb = pullback(z, Ms, cs, rs);
  zs = [z, zpb];
  zs_pol = rect_to_pol(zs);

  /* check if in fundamental domain */
  if(abs(z - zpb) < 10e-10,
    error("Point "z" already in fundamental domain."),

    /* check if different arguments in flare */
    if(abs(zs_pol[1][2] - zs_pol[2][2]) < 10e-10,
      error("Point "z" and pullback have same argument.");
    );
  );

  return(1);
}

/*
Produces N points along the ray at angle alpha equally spaced in log space
from 1 to sqrt(kappa)
*/
test_points_ray(N, alpha)=
{
  local(zs, kappa, j);

  kappa = (2 + sqrt(3))/(2 - sqrt(3));

  zs = vector(N);
  for(j = 1, N,
    zs[j] = exp(j/(2*N + 1)*log(kappa))*exp(I*alpha);
  );

  return(zs);
}

/*
Converts list of points in upper half plane to list of [radius, argument] pairs
in polar coordinates
*/
rect_to_pol(zs)=
{
  local(N, zs_pol, i);

  N = length(zs);
  zs_pol = vector(N, x, vector(2));

  for(i = 1, N,
    zs_pol[i][1] = abs(zs[i]);
    zs_pol[i][2] = arg(zs[i]);
  );

  return(zs_pol);
}

/**********************************************************************
  Experiments
**********************************************************************/

/* Run one iteration of the secant method zoom in */
example_secant() =
{
  local(kappa, zs1, zs2, i, Ms, gs, cs, rs, thet1, thet2, N, M, zpbs1, zpsb2,
        zs1_pol, zs2_pol, zpbs1_pol, zpbs2_pol, s, R);

  default(realprecision, 60);

  kappa = (2 + sqrt(3))/(2 - sqrt(3));

  /* parameters */
  thet1 = Pi/20; thet2 = Pi/21;
  N = 100; M = 40;

  R = 4.388; delta = 3e-4;

  /* get info needed for pullbacks */
  Ms = get_matrices();
  gs = get_geodesics();
  cs = gs[1];
  rs = gs[2];

  /* set up test points */
  zs1 = test_points_ray(N, thet1);
  zs2 = test_points_ray(N, thet2);

  /* check that test points are admissible */
  for(i = 1, N,
    is_admissible(zs1[i], Ms, cs, rs);
    is_admissible(zs2[i], Ms, cs, rs);
  );

  /* get pullbacks and convert everything to polar */
  zpbs1 = vector(N);
  zpbs2 = vector(N);
  for(i = 1, N,
    zpbs1[i] = pullback(zs1[i], Ms, cs, rs);
    zpbs2[i] = pullback(zs2[i], Ms, cs, rs);
  );
  zs1_pol = rect_to_pol(zs1);
  zpbs1_pol = rect_to_pol(zpbs1);
  zs2_pol = rect_to_pol(zs2);
  zpbs2_pol = rect_to_pol(zpbs2);

  /* run secant method */
  secant_method(zs1_pol, zs2_pol, zpbs1_pol, zpbs2_pol, M, circles, kappa, R, delta);
}

/**********************************************************************
  Miscellaneous test functions
**********************************************************************/

test_pullback()=
{
  local(kappa, zs, i, Ms, gs, cs, rs, z, zpb);

  kappa = (2 + sqrt(3))/(2 - sqrt(3));

  /* parameters */
  thet = Pi/20;
  N = 50;

  /* set up test points */
  zs = vector(N);
  for(i = 0, N - 1,
    zs[i + 1] = kappa^(i/(2*N))*exp(thet*I);
  );

  /* print each point with pullback */
  Ms = get_matrices();
  gs = get_geodesics();
  cs = gs[1];
  rs = gs[2];
  for(i = 1, N,
    z = zs[i];
    print(z);
    zpb = pullback(z, Ms, cs, rs);
    print(zpb);
    print("");
  );
}

test_init_eqns()=
{
  local(kappa, zs, zpbs, i, Ms, gs, cs, rs, thet, N, M, zs_pol, zpbs_pol, s);

  kappa = (2 + sqrt(3))/(2 - sqrt(3));

  /* parameters */
  thet = Pi/20;
  N = 2; M = 2;
  s = 0.4;

  /* get info needed for pullbacks */
  Ms = get_matrices();
  gs = get_geodesics();
  cs = gs[1];
  rs = gs[2];

  /* set up test points */
  zs = test_points_ray(N, thet);
  print(zs);

  /* check that test points are admissible */
  for(i = 1, N,
    is_admissible(zs[i], Ms, cs, rs);
  );

  /* get pullbacks and convert everything to polar */
  zpbs = vector(N);
  for(i = 1, N,
    zpbs[i] = pullback(zs[i], Ms, cs, rs);
  );
  print(zpbs);
  zs_pol = rect_to_pol(zs);
  zpbs_pol = rect_to_pol(zpbs);
  print(zs_pol);
  print(zpbs_pol);

  /* set up equation and print matrix */
  A = init_eqns(zs_pol, zpbs_pol, s, M, kappa);
  print(A);
}

test_true_s()=
{
  local(kappa, zs1, zs2, i, Ms, gs, cs, rs, thet1, thet2, N, M, zpbs1, zpsb2,
        zs1_pol, zs2_pol, zpbs1_pol, zpbs2_pol, s, R);

  default(realprecision, 60);

  kappa = (2 + sqrt(3))/(2 - sqrt(3));

  /* parameters */
  thet1 = Pi/20; thet2 = Pi/21;
  N = 100; M = 20;

  /* true s value */
  R = 5.0987419087295;
  /*R = 3.5360020929376;
  R = 4.3880535632221;*/
  s = 0.5 + I*R;

  /* get info needed for pullbacks */
  Ms = get_matrices();
  gs = get_geodesics();
  cs = gs[1];
  rs = gs[2];

  /* set up test points */
  zs1 = test_points_ray(N, thet1);
  zs2 = test_points_ray(N, thet2);

  /* check that test points are admissible */
  for(i = 1, N,
    is_admissible(zs1[i], Ms, cs, rs);
    is_admissible(zs2[i], Ms, cs, rs);
  );

  /* get pullbacks and convert everything to polar */
  zpbs1 = vector(N);
  zpbs2 = vector(N);
  for(i = 1, N,
    zpbs1[i] = pullback(zs1[i], Ms, cs, rs);
    zpbs2[i] = pullback(zs2[i], Ms, cs, rs);
  );
  zs1_pol = rect_to_pol(zs1);
  zpbs1_pol = rect_to_pol(zpbs1);
  zs2_pol = rect_to_pol(zs2);
  zpbs2_pol = rect_to_pol(zpbs2);

  /* compute and compare coefficients */
  x1 = get_coefficients(zs1_pol, zpbs1_pol, s, M, kappa);
  x2 = get_coefficients(zs2_pol, zpbs2_pol, s, M, kappa);

  print("x1 = "precision(x1, 1));
  print(" ");
  print("x2 = "precision(x2, 1));
  print(" ");
  print("x1 - x2 = "precision(x1-x2, 1));

  return([x1, x2]);
}
