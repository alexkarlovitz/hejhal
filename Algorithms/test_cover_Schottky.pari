/*
This file contains functions for testing the algorithms in
cover_Schottky.pari. NOTE: need to run "\r flare_disk_Schottky.pari"
in gp before running any code in this file, since it assumes those
functions are defined.
*/

/**********************************************************************
  Functions for generating test points
**********************************************************************/

/*
Checks if a test point is admissible. This means the point cannot be in the
fundamental domain, the point and its pullback must have different arguments
in the flare, and the both points must be admissible with respect to the
flare (arg <= alpha0).
*/
is_admissible(z, thet, alpha0, circles, z1, z2, t)=
{
  local(zpb, z_flare, zpb_flare);

  /* get pullback and corresponding flare points */
  z_flare = true_to_hyp(z, z1, z2, t);
  zpb = pullback_Schottky(z, circles);
  zpb_flare = true_to_hyp(zpb, z1, z2, t);

  /* check if in fundamental domain */
  if(abs(z - zpb) < 10e-10,
    return(0),

    /* check if different args in flare */
    if(abs(z_flare[2] - zpb_flare[2]) < 10e-10,
      return(0),

      /* check if both points admissible wrt flare */
      if(z_flare[2] > alpha0,
        return(0),

        if(zpb_flare[2] > alpha0,
          return(0),

          /* if we got here, we have a test point! */
          return(1);
        );
      );
    );
  );
}

/*
Tries N test points along a ray in the flare domain of angle alpha. Returns
all admissible points.
*/
test_points_ray(N, thet, alpha, alpha0)=
{
  local(zs, circles, z1, z2, t, pre_kappa, pts_found, pts_considered,
        rand_norm, rand_arg, z, z_flare);

  zs = vector(N);

  /* get circle and flare data */
  circles = get_circles_UHP(thet);
  [z1, z2, t, pre_kappa] = get_flare_data(circles);

  /* kappa is the scaling parameters for the flares */
  kappa = true_to_hyp(pre_kappa, z1, z2, t)[1];

  /* keep track of how many points we find */
  pts_found = 0;
  for(j = 1, N,

    /* get point in flare domain at angle alpha */
    z = hyp_to_true(exp(j/(2*N)*log(kappa)), alpha, z1, z2, t);

    /* if admissible, save it; otherwise, continue */
    if(is_admissible(z, thet, alpha0, circles, z1, z2, t),
      pts_found += 1;
      zs[pts_found] = z;
    );
  );

  print("Found "pts_found" admissible points out of "N" tested.");
  return(zs[1..pts_found]);
}

/*
Generates N admissible test points randomly in the unit disk.
*/
test_points_random(N, thet, alpha0)=
{
  local(zs, circles, z1, z2, t, pre_kappa, pts_found, pts_considered,
        rand_norm, rand_arg, z_disk, z);

  zs = vector(N);

  /* get circle and flare data */
  circles = get_circles_UHP(thet);
  [z1, z2, t, pre_kappa] = get_flare_data(circles);

  /* keep generating random test points until we find N */
  pts_found = 0;
  pts_considered = 0;
  while(pts_found < N,
    /* get random point in disk */
    rand_norm = random()/2^31;
    rand_arg = 2*Pi*random()/2^31;
    z_disk = rand_norm*exp(I*rand_arg);

    /* get corresponding point */
    z = inv_cayley_transform(z_disk);

    /* if admissible, save it; otherwise, continue */
    if(is_admissible(z, thet, alpha0, circles, z1, z2, t),
      pts_found += 1;
      zs[pts_found] = z;
    );

    pts_considered += 1;
    if(pts_considered >= 1000*N,
      print("Considered "pts_considered" points and found "pts_found" to be used.");
      error("Could not find enough test points.");
    );
  );

  print("Considered "pts_considered" points.");
  return(zs);
}

/**********************************************************************
  Experiments
**********************************************************************/

/* Run one iteration of the secant method zoom in */
example_secant() =
{
  local(thet, N, alpha0, s, delta, circles, z1, z2, t, pre_kappa,
        a, b, elapsed);

  /*default(realprecision, 60);*/

  /* Parameters */
  thet = 116*Pi/180;

  N = 100;

  alpha0 = 9*Pi/10; M = 20;

  s = 0.82; delta = 3e-3;

  /* Schottky group data */
  circles = get_circles_UHP(thet);
  [z1, z2, t, pre_kappa] = get_flare_data(circles);

  /* Get test points */
  zs1 = test_points_random(N, thet, alpha0);
  zs2 = test_points_random(N, thet, alpha0);
  /*alpha1 = 3*Pi/4 - 0.1;
  alpha2 = 3*Pi/4 - 0.2;
  zs1 = test_points_ray(N, thet, alpha1, alpha0);
  zs2 = test_points_ray(N, thet, alpha2, alpha0);*/

  a = getwalltime();
  s_guess = secant_method(zs1, zs2, alpha0, M, circles, z1, z2, t, pre_kappa, s, delta);
  b = getwalltime();
  elapsed = (b - a)/1000.0;
  print("Time: "elapsed" seconds");
  print("Final guess: s = "s_guess);
}

/**********************************************************************
  Miscellaneous test functions
**********************************************************************/

test_circles_UHP()=
{
  circles = get_circles_UHP(Pi/2);
  print(circles);
  print();

  [z1, z2, t, pre_kappa] = get_flare_data(circles);
  print("z1");
  print(z1);
  print();
  print("z2");
  print(z2);
  print();
  print("t");
  print(t);
  print();
  print("pre_kappa");
  print(pre_kappa);
}

test_pullback()=
{
  local(circles, zs, ws);

  circles = get_circles_UHP(Pi/2);

  zs = vector(100, x, (x - 1)/20 + 5 + I/10);
  print(zs);
  print();
  ws = vector(100);

  for(i = 1, 100,
    ws[i] = pullback_Schottky(zs[i], circles);
  );
  print(ws);
}

test_flare_map()=
{
  local(circles, z1, z2, t, pre_kappa, z, w);

  circles = get_circles_UHP(Pi/2);

  [z1, z2, t, pre_kappa] = get_flare_data(circles);
  print("kappa = "true_to_hyp(pre_kappa, z1, z2, t));
  print(" ");

  /* test point in flare */
  z = -1.5 + 1/10*I;
  w = true_to_hyp(z, z1, z2, t);
  print("z = "z);
  print("U(z) = "w);
  print("U^{-1}(U(z)) = "hyp_to_true(w[1], w[2], z1, z2, t));
  print(" ");

  /* test point just outside flare */
  z = -2.5 + 1/10*I;
  w = true_to_hyp(z, z1, z2, t);
  print("z = "z);
  print("U(z) = "w);
  print("U^{-1}(U(z)) = "hyp_to_true(w[1], w[2], z1, z2, t));
  print(" ");

  /* test point near 0 */
  z = -8 + 1/10*I;
  w = true_to_hyp(z, z1, z2, t);
  print("z = "z);
  print("U(z) = "w);
  print("U^{-1}(U(z)) = "hyp_to_true(w[1], w[2], z1, z2, t));
  print(" ");

  /* test point near infinity */
  z = -0.7 + 1/10*I;
  w = true_to_hyp(z, z1, z2, t);
  print("z = "z);
  print("U(z) = "w);
  print("U^{-1}(U(z)) = "hyp_to_true(w[1], w[2], z1, z2, t));
  print(" ");
}

test_init_eqns()=
{
  local(A, circles, z1, z2, t, pre_kappa, zs, s, alpha0, rho0, M1, M2);

  /* Schottky group data */
  circles = get_circles_UHP(Pi/6);
  [z1, z2, t, pre_kappa] = get_flare_data(circles);

  /* Some test z values */
  zs = vector(3);
  zs[1] = 1/10*I;
  zs[2] = 1/2 + I;
  zs[3] = 1 + I;

  /* Parameters */
  s = 0.4;
  alpha0 = Pi;
  M = 3;

  A = init_eqns(zs, s, alpha0, M, circles, z1, z2, t, pre_kappa);
  default(realprecision, 5);
  print(A);
  default(realprecision, 38);
}

test_test_points()=
{
  local(N, thet, alpha0, zs, z, z1, z2, t, pre_kappa);

  N = 100;
  thet = 116*Pi/180;
  alpha0 = 9*Pi/10;

  /* get circle and flare data */
  circles = get_circles_UHP(thet);
  [z1, z2, t, pre_kappa] = get_flare_data(circles);

  zs = test_points_random(N, thet, alpha0);
  for(i = 1, length(zs),
    z_flare = true_to_hyp(zs[i], z1, z2, t);
    print(precision(z_flare, 1));
  );

  print(zs);
}

test_true_s()=
{
  local(thet, alpha0, M, N, s, circles, z1, z2, t, pre_kappa, zs1, zs2, x1, x2);

  /*default(realprecision, 60);*/

  /* Parameters */
  thet = 116*Pi/180;

  alpha0 = 9*Pi/10; M = 20;
  N = 100;

  s = 0.82342329;

  /* Schottky group data */
  circles = get_circles_UHP(thet);
  [z1, z2, t, pre_kappa] = get_flare_data(circles);

  /* Get test points */
  zs1 = test_points_random(N, thet, alpha0);
  zs2 = test_points_random(N, thet, alpha0);
  /*alpha1 = 3*Pi/4 - 0.1;
  alpha2 = 3*Pi/4 - 0.2;
  zs1 = test_points_ray(N, thet, alpha1, alpha0);
  zs2 = test_points_ray(N, thet, alpha2, alpha0);*/

  x1 = get_coefficients(zs1, s, alpha0, M, circles, z1, z2, t, pre_kappa);
  x2 = get_coefficients(zs2, s, alpha0, M, circles, z1, z2, t, pre_kappa);

  print("x1 = "precision(x1, 1));
  print(" ");
  print("x2 = "precision(x2, 1));
  print(" ");
  print("x1 - x2 = "precision(x1-x2, 1));
}
