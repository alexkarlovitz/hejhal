/*
This file contains PARI code to run Hejhal's algorithm on a
symmetric Schottky group with respect to the flare expansion.
We use symmetry in the Maass forms to only consider the expansion
in a single flare.
Some of the code is borrowed from Andreas Strombergsson.
*/

/*
We assume the Schottky group is generated by 3 circles of equal
size in the disk model, symmetrically spaced around the unit circle.
*/

/* Author: Alex Karlovitz */

/**********************************************************************
  Special functions (from Strombergsson)
**********************************************************************/

/* See def in GR, 9.100. We sum up to and including the z^N-term.
 Chooses N by the following (completely ad hoc and sloppy heuristic)
 method: Stop when p has decreased >= 10 times in a row and |p|<re*|s|. */

hypergeom(a,b,c,z)=
{
  local(s,p,pp,n,r,re,prec);

  /* re: Desired relative error bound for hypergeom function.
     Let's make it correspond to current precision. */
  prec = default(realprecision);
  re = 10^(-prec);

  s=1;
  p=1;
  r=0;
  n=0;
  while(1,
    pp=(a+n)*(b+n)/((c+n)*(1+n))*z;
    if (abs(pp)<1, r++, r=0);
    p=p*pp;
    s+=p;
    if ((r>=10 && abs(p)<re*abs(s)), return(s););
    n++;
  );
  s;
}

/* Legendre function of the first kind, for -1<=x<=1.  */
/* See def in GR, 8.704.  */
Plegendre(mu,nu,x)=
{
  real(1/gamma(1-mu)*((1+x)/(1-x))^(mu/2)*hypergeom(-nu,nu+1,1-mu,(1-x)/2));
}

/**********************************************************************
  Disk model functions
**********************************************************************/

/*
Map from upper half plane model to disk model.
*/
cayley_transform(z) =
{
  (z - I)/(z + I);
}

/*
Map from disk model to upper half plane model
*/
inv_cayley_transform(w) =
{
  I*(1 + w)/(1 - w);
}

/*
Get point equivalent to w under rotations by 2Pi/3 with 2Pi/3 <= arg <= 4Pi/3
*/
rotation_equiv(w)=
{
  /* If w = 0 or w already in sector, return w */
  if(w == 0, return(0));
  if(2*Pi/3 <= arg(w) || arg(w) <= -2*Pi/3, return(w));

  /* Otherwise, return appropriate rotation */
  if(imag(w) >= 0,
    return(exp(2*Pi*I/3)*w);
    ,
    return(exp(-2*Pi*I/3)*w);
  );
}

/**********************************************************************
  Whittaker functions
**********************************************************************/

/* Whittaker function in the flare expansion */
flare_Whitt(thet, m, s, kappa)=
{
  sqrt(sin(thet))*Plegendre(0.5-s, -0.5+2*Pi*m*I/log(kappa), cos(thet));
}

/**********************************************************************
  Schottky group functions
**********************************************************************/

/* Computes reflection through geodesic semicircle in upper half plane */
reflect(z, cent, rad)=
{
  return( rad^2 / (z - cent) + cent );
}

/*
Given angle defining the symmetric Schottky group, gets the circle data
in the upper half plane model.
*/
get_circles_UHP(thet)=
{
  local(circles, center_angle, ep1, ep2);

  /* Circles are given as the pair [center, radius] */
  circles = vector(3, x, vector(2));
  for(i = 0, 2,
    center_angle = i*2*Pi/3;
    ep1 = inv_cayley_transform(exp(I*(center_angle - thet/2)));
    ep2 = inv_cayley_transform(exp(I*(center_angle + thet/2)));

    circles[i + 1][1] = (ep1 + ep2) / 2;
    circles[i + 1][2] = abs(ep1 - ep2) / 2;
  );

  return(circles);
}

/*
Given two (center, radius) pairs (c, r) and (a, t), computes the fixed
points of the Mobius transformation obtained from reflection across the
first circle composed with reflection across the second circle
*/
fixed_points_refls(c, r, a, t)=
{
  local(A, B);
  A = (c^2 - a^2 + t^2 - r^2)/2/(c - a);
  B = sqrt(( (a - c)^2 - (r^2 + t^2) )^2 - 4*r^2*t^2 )/2/(c - a);
  return([A - B, A + B]);
}

/*
Given circle data (as obtained by get_circles_UHP), compute the data needed
to map to the flare domain fixed by R2R3, [z1, z2, t, pre_kappa]:
  - z1, z2: endpoints of the geodesic cutting off the flare
  - t: leftmost point of the flare
  - pre_kappa: rightmost point of the flare
*/
get_flare_data(circles)=
{
  local(flare_data, temp);

  flare_data = vector(4);

  /* flare is between R2 and R3 */
  temp = fixed_points_refls(circles[2][1], circles[2][2],
                            circles[3][1], circles[3][2]);
  flare_data[1] = min(real(temp[1]), real(temp[2]));
  flare_data[2] = max(real(temp[1]), real(temp[2]));
  flare_data[3] = circles[2][1] + circles[2][2];
  flare_data[4] = circles[3][1] - circles[3][2];

  return(flare_data);
}

/*
Pullback to fundamental domain; that is, outside R2 and R3 but inside R1.
*/
pullback_Schottky(z_start, circles)=
{
  local(z, in_FD);

  z = z_start;
  while(1,
    in_FD = 1;

    /* check if outside R1 */
    if(abs(z - circles[1][1]) > circles[1][2],
      /* map by R1 */
      z = reflect(z, circles[1][1], circles[1][2]);
      in_FD = 0;
    );

    /* check if in R2 */
    if(abs(z - circles[2][1]) < circles[2][2],
      /* map by R2 */
      z = reflect(z, circles[2][1], circles[2][2]);
      in_FD = 0;
    );

    /* check if in R3 */
    if(abs(z - circles[3][1]) < circles[3][2],
      /* map by R3 */
      z = reflect(z, circles[3][1], circles[3][2]);
      in_FD = 0;
    );

    /* If we passed all those tests, z is in fundamental domain */
    if(in_FD == 1, return(z));

    /* If we ever end back at z_start, in an infinite loop */
    if(abs(z - z_start) < 1e-10,
      print("Warning: pullback algorithm for "z_start" returned to self.");
      return(z_start)
    );
  );
}

/*
Map from flare domain to original domain
*/
hyp_to_true(rho, th, z1, z2, t) =
{
  local(w, c);

  c = (t - z2)/(t - z1);
  w = rho*exp(th*I);
  (z2*w - c*z1)/(w - c);
}

/*
Map from original domain to flare domain
*/
true_to_hyp(z, z1, z2, t)=
{
  local(w, c);

  c = (t - z2)/(t - z1);
  w = c*(z - z1)/(z - z2);
  [abs(w), arg(w)];
}

/**********************************************************************
  Linear algebra algorithm (from Strombergsson)
**********************************************************************/

/*
 To utilize as much information as possible, we will typically be looking
 at a linear system with more equations than variables. In particular, we
 have a system of the type "A*x=0", where x is the sought for M-dimensional
 vector of Fourier coefficients, and A is an N*M-matrix where N>=M-1
 is the number of given points. Of course, since typically N should be
 much larger than M, it will be impossible to find an EXACT solution x
 to "A*x=0". Instead we seek x so as to MINIMIZE |A*x| (Euclidean norm).
 for some given normalization of x. Perhaps the most natural normalization
 of x would be |x|=1; however here we instead normalize by setting
 x[1]=1. Thus, since |A*x|^2=x^t*AA*x with AA:=A^t*A (an M*M-matrix), it
 turns out that we wish to find that vector x which satisfies x[1]=1 and
 AA'*x=0, where AA' is the (M-1)*M-matrix obtained by removing the top row
 from AA. We find this vector x using Gauss elimination, via solve_sys.
*/

/*
 The following routine solves a linear system of equations using
 Gauss elimination. Of course we could instead have tried to make
 use of some built-in PARI routine, but we wanted to have maximal
 control. Actually the routine below is a very downscaled version
 of a much longer routine, which e.g. allows a higher dimensional
 solution space (e.g. when looking for holomorphic modular forms)
 and also allows some "tricks", e.g. to have available more
 equations than are actually used in the end, so that in each new
 j-iteration we seek among more than one row to find a good pivot.
 (This is probably humbug to any expert in numerical linear algebra,
 but it has been found to work well in practice when dealing with a
 higher dimensional space of holomorphic modular forms.) Anyway,
 I have taken this away below since I doubt it would be useful for
 the problem we are now discussing.)
*/

/*
 Solve the homogeneous system of equations whose coefficients are
 given by AA using Gauss elimination.
 cfree is the index of the column which should be kept as a free variable.
*/
solve_sys(AA, cfree)=
{
  local(Nequ, Nu, c, maxc, maxk, columninfo, j, k, A, N, jj);

  /* get number of equations and variables */
  Nequ = matsize(AA)[2];
  Nu = matsize(AA[1])[2];

  /* We maintain  columninfo  so that
    columninfo[k] = j   if column k has been used as pivot column and
                          the corresponding "1" is in row j.
                  = -1  if column k has not yet been used as pivot. */
  columninfo=vector(Nu,k,-1);

  /* loop through rows */
  for(j=1,Nequ,
    /* Find the coefficient of largest absolute value in row number j. */
    maxc=0; maxk=-1;
    for(k=1,Nu, if((k!=cfree),
      c=abs(AA[j][k]); if((c>maxc), maxk=k; maxc=c;);
    ););
    if((maxk==-1), error("In solveequsyst; unexpected linear dependence "j););

    /* Divide all coefficients in row j  with  AA[j,maxk]. */
    A=1/AA[j][maxk];
    AA[j]=A*AA[j];
    AA[j][maxk]=1;    /* EXACT 1, not "1.000000000023", say! */

    /* Update columninfo. */
    columninfo[maxk]=j;

    /* Subtract row j from all other rows. */
    for(N=1,Nequ,
      if(N != j,
        A=AA[N][maxk];
        AA[N] = AA[N]-A*AA[j];
        AA[N][maxk]=0;   /* EXACT 0, not "0.0E-10", say! */
      );
    );
  );

  /* Return the solution vector. */
  vector(Nu, k, if(k==cfree, 1, -AA[columninfo[k]][cfree]));
}

/**********************************************************************
  Code for setting up and solving linear system
**********************************************************************/

/*
Sets up matrix of equations for list of test points z
  - use only the one flare expansion (rest are equivalent under rotation)
  - lambda = s(1 - s)
  - call test point "admissible" if it has argument <= alpha0
  - M - number of coefficients to take in the flare expansion
*/
init_eqns(zs, s, alpha0, M, flare_data, circles)=
{
  local(num_eqns, j, z, zpb, kappa, i, z_rot, zpb_rot, z_flare, zpb_flare, m, B);

  /* kappa is the scaling parameter for the flares */
  kappa =  true_to_hyp(flare_data[4], flare_data[1],
                        flare_data[2], flare_data[3])[1];

  /* every point in the vector z must give 1 equation
     - rows of A correspond to equations
     - cols correspond to coefficients */
  A = vector(length(zs), x, vector(M));

  /* Loop through all test points */
  for(j = 1, length(zs),
    z = zs[j];
    zpb = pullback_Schottky(z, circles);

    /* Check whether point is in fundamental domain */
    if(abs(zpb - z) < 1e-10,

      /* If point is IN fundamental domain, error out */
      error("Test point "z" already in fundamental domain.");

      ,
      /* If point is NOT in fundamental domain, equation compares
         function evaluated at (rotated) z to that at (rotated) zpb */

      /* get rotated values in flare domain */
      z_rot = inv_cayley_transform(rotation_equiv(cayley_transform(z)));
      zpb_rot = inv_cayley_transform(rotation_equiv(cayley_transform(zpb)));
      z_flare = true_to_hyp(z_rot, flare_data[1],
                            flare_data[2], flare_data[3]);
      zpb_flare = true_to_hyp(zpb_rot, flare_data[1],
                              flare_data[2], flare_data[3]);

      /* Are they admissible? */
      if(z_flare[2] > alpha0,
        error("Point "z" inadmissible, arg = "z_flare[2]);
      );
      if(zpb_flare[2] > alpha0,
        error("Pullback "zpb" of point "z" inadmissible, arg = "zpb_flare[2]);
      );

      /* Add equation */
      for(m = 0, M - 1,
        A[j][m + 1] = flare_Whitt(z_flare[2], m, s, kappa)*cos(2*Pi*m*log(zpb_flare[1])/log(kappa))
                    - flare_Whitt(zpb_flare[2], m, s, kappa)*cos(2*Pi*m*log(zpb_flare[1])/log(kappa));
      );
    );
  );

  /* return a matrix object */
  B = matrix(length(zs), M, k, j, A[k][j]);
  return(B);
}

/*
Given a set of test points zs, set up and solve linear system for the Fourier
coefficients. Assumes we are working with a symmetric Schottky group.
  - s - assumed eigenvalue is lambda = s(1 - s)
  - call test point "admissible" if it has argument <= alpha0
  - M - number of coefficients to take in the flare expansion
  - flare_data - see get_flare_data above
*/
get_coefficients(zs, s, alpha0, M, flare_data, circles)=
{
  local(k, A, AA, B, x);

  /* Set up matrix of equations */
  A = init_eqns(zs, s, alpha0, M, flare_data, circles);

  /* Use Strombergsson's method for least squares */
  AA = mattranspose(A)*A;
  B = vector(M-1, k, vector(M, j, AA[k+1, j]));
  x = solve_sys(B, 1); /* TODO: maybe play with second argument?
                          (normalize wrt different flare...?) */

  /* return Fourier coefficient vector */
  return(x);
}

/**********************************************************************
  Actual loops for Hejhal's algorithm
**********************************************************************/

/*
Runs a "secant method version" of Hejhal's algorithm (learned from
Strombergsson)
  - s - assumed eigenvalue is lambda = s(1 - s)
  - call test point "admissible" if it has argument <= alpha0
  - M - number of coefficients to take in the flare expansion
  - flare_data - see get_flare_data above
*/
secant_method(z1, z2, alpha0, M, flare_data, circles, s, delta)=
{
  local(s_new, c1, c2, j, s_max, s_min, s_mid, delta_new);

  s_new=vector(4); /* REMEMBER TO CHANGE THIS IF YOU CHANGE C1 AND C2 */

  while(1,

    /* Get differences of some Fourier coefficients for s */
    x1 = get_coefficients(z1, s, alpha0, M, flare_data, circles);
    x2 = get_coefficients(z2, s, alpha0, M, flare_data, circles);
    c1 = [x1[2] - x2[2], x1[3] - x2[3], x1[M+1] - x2[M+1], x1[2*M+1] - x2[2*M+1]];

    /* Now do the same for s + delta */
    x1 = get_coefficients(z1, s + delta, alpha0, M, flare_data, circles);
    x2 = get_coefficients(z2, s + delta, alpha0, M, flare_data, circles);
    c2 = [x1[2] - x2[2], x1[3] - x2[3], x1[M+1] - x2[M+1], x1[2*M+1] - x2[2*M+1]];

    /* Run one iteration of secant method on each difference */
    s_max = 0.0; s_min = 100.0;
    for(j = 1, length(c1),
      s_new[j] = (c1[j]*(s+delta) - c2[j]*s)/(c1[j] - c2[j]);
      s_max = max(s_max, s_new[j]);
      s_min = min(s_min, s_new[j]);
    );
    s_mid = 0.5*(s_max + s_min);

    /* Uncomment if you want to print current predictions */
    print("--------------------------------------");
    print("Current predictions:");
    for(j = 1, length(c1), print(s_new[j]));
    print(" ");

    /* Ad hoc check if it's worth continuing */
    delta_new = (s_max - s_min)*5;
    if(delta_new > 0.5*delta,
      print("Approximate error:"smax-smin);
      return(s_mid);
    );
    delta = delta_new;
    s = s_mid-0.5*delta;
  );
}

/*
Use Hejhal's original zoom in method: search for s in a grid of points,
then look at continually finer grids at best test points.
Get best based on minimum error in Fourier coefficients between two
sets of test points.
*/
grid_zoom_in(z1, z2, alpha0, M, flare_data, circles, s_start, grid_size_start, num_steps)=
{
  local(best_s, grid_size, s_list, error_list, R, idx);

  best_s = s_start;
  grid_size = grid_size_start;

  /* repeat process for num_steps */
  for(i = 1, num_steps,
    /* print best s so far */
    print("Current guess: s = "best_s);

    /* get list of guesses */
    s_list = vector(11, n, best_s - 5*grid_size + (n-1)*grid_size);
    error_list = vector(11, n, 0);

    /* loop through grid of s values */
    for(j = 1, 11,
      /* get two sets of coefficients  and store error */
      x1 = get_coefficients(z1, s_list[j], alpha0, M, flare_data, circles);
      x2 = get_coefficients(z1, s_list[j], alpha0, M, flare_data, circles);
      error_list[j] = norml2(x1 - x2);
    );

    /* print list of s values and corresponding errors */
    /*print("s guesses: "s_list);
    print("errors: "error_list);*/

    /* get s with minimum error to search near */
    vecmin(error_list, &idx);
    best_s = s_list[idx];

    /* update grid size */
    grid_size = grid_size*0.1;
  );

  return(best_s);
}
