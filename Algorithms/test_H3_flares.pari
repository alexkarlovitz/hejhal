/*
This file contains functions for testing the algorithms in
H3_flares.pari. NOTE: need to run "\r H3-flares.pari"
in gp before running any code in this file, since it assumes those
functions are defined.
*/

/**********************************************************************
  Functions for generating test points
**********************************************************************/

/*
To be admissible, a point cannot be in the fundamental domain, and its pullback
must have different azimuthal AND polar angles.
TODO: think about what admissible wrt expansion means in this case.
      Maybe it isn't a concern in 3-space.
*/
is_admissible(zs)=
{
  local(z, zpb, z_flare, zpb_flare);

  /* loop through points */
  for(j = 1, length(zs),
    z = zs[j];
    zpb = pullback_Ap(z);

    /* Check whether point is in fundamental domain */
    if(abs(zpb[1] - z[1]) + abs(zpb[2] - z[2]) + abs(zpb[3] - z[3]) < 10e-10,

      /* Point is IN fundamental domain */
      error("Point "z" is in fundamental domain.");
    ,

      /* Point is NOT in fundamental domain */

      /* Get corresponding points in flare */
      z_flare = true_to_hyp(z);
      zpb_flare = true_to_hyp(zpb);

      /* Check that points have different azimuthal AND polar angles */
      if(abs(z_flare[2] - zpb_flare[2]) < 10e-10,
        error("Point "z" and pullback have same azimuthal angle in flare domain.");
      );
      if(abs(z_flare[3] - zpb_flare[3]) < 10e-10,
        error("Point "z" and pullback have same polar angle in flare domain.");
      );
    );
  );
  print("Admissibility check passed!");
}

/*
Generates N test points in the flare domain at angle [thet, phi] evenly spaced
(in log space) from 1 to sqrt(kappa). Returns those points in original domain.
*/
test_points_ray(N, thet, phi)=
{
  local(kappa, log_kappa, zs);

  /* here is the kappa we use for the Apollonian packing */
  kappa = (3 + sqrt(5))/(3 - sqrt(5));
  log_kappa = log(kappa);

  /* now form the points! */
  zs = vector(N);
  for(j = 1, N,
    zs[j] = hyp_to_true(exp(j/(2*N)*log_kappa), thet, phi);
  );

  return(zs);
}

/**********************************************************************
  Experiments
**********************************************************************/

/* Run one iteration of the secant method zoom in */
example_secant() =
{
  local(thet, N, s, delta, a, b, elapsed);

  /*default(realprecision, 60);*/

  /* Parameters */
  N = 105; M = 10;

  thet1 = -3*Pi/4; thet2 = -3*Pi/4 + 0.01;
  phi1 = Pi/4; phi2 = Pi/4 + 0.01;

  s = 1.31; delta = 3e-3;

  /* form points */
  zs1 = test_points_ray(N, thet1, phi1);
  zs2 = test_points_ray(N, thet2, phi2);

  a = getwalltime();
  s_guess = secant_method(zs1, zs2, M, s, delta);
  b = getwalltime();
  elapsed = (b - a)/1000.0;
  print("Time: "elapsed" seconds");
  print("Final guess: s = "s_guess);
}

/**********************************************************************
  Miscellaneous test functions
**********************************************************************/

test_quaternions()=
{
  local(q1, qi, qj, qk, q);

  /* make some quaternions */
  q1 = [1, 0, 0, 0];
  qi = [0, 1, 0, 0];
  qj = [0, 0, 1, 0];
  qk = [0, 0, 0, 1];

  /* try combination of these */
  q = Qadd(Qc(2, q1), Qc(3, qj));
  print(q);

  /* products */
  print(Qmult(q, q1));
  print(Qmult(q, qi));
  print(Qmult(q, qj));
  print(Qmult(q, qk));
  print(Qmult(q1, q));
  print(Qmult(qi, q));
  print(Qmult(qj, q));
  print(Qmult(qk, q));

  /* division should give inverse */
  print(Qdiv(q1, q1));
  print(Qdiv(qi, qi));
  print(Qdiv(qj, qj));
  print(Qdiv(qk, qk));
  print(Qdiv(q, q));
}

test_mobius()=
{
  local(T, S, A, qj);

  /* act on the k-free quaternion j */
  qj = [0, 0, 1];

  /* T shifts by 1 in x1-dimension */
  T = [[1, 1], [0, 1]];
  print(mobius(T, qj));

  /* S reflects through unit sphere and across x2-axis */
  S = [[0, -1], [1, 0]];
  print(mobius(S, qj));
  print(mobius(S, mobius(T, qj)));

  /* A negates real and i components and adds i */
  A = [[I, 1], [0, -I]];
  print(mobius(A, qj));
  print(mobius(A, [1, 1, -1]));
}

test_pullback()=
{
  local(zs);

  /* random UHP points */
  zs = [[0, 0, 1],
        [7, 2, 1],
        [-1.2, 1.5, 1],
        [0, -2, 0.5],
        [5.2, -2, 0.5],
        [1, 1, 1]];

  for(i = 1, length(zs),
    print(zs[i]", "pullback_Ap(zs[i]));
  );

  /* some points on the boundary */
  zs = [[0, 2, 0],
        [7, 0.5, 0],
        [-1.2, 1.5, 0],
        [-2.7, 0.2, 0]];

  print(" ");

  for(i = 1, length(zs),
    print(zs[i]", "pullback_Ap(zs[i]));
  );
}

test_Whitt()=
{
  print(flare_Whitt(1, 1, 1, 1.5, exp(1)));
  print(flare_Whitt(Pi/4, 2, 7, 1.72, exp(exp(1))));
  a = getwalltime();
  print(flare_Whitt(0.001, 21, 11, 1.1, exp(15)));
  b = getwalltime();
  print((b - a)/1000.0);
  print(flare_Whitt(Pi/2 - 0.01, 2, 5, 1.001, exp(6.8)));
  print(flare_Whitt(1.12, 2, 4, 1.98, exp(1.342)));
}

test_flare_map()=
{
  local(zs);

  /* random UHP points */
  zs = [[0, 0, 1],
        [7, 2, 1],
        [-1.2, 1.5, 1],
        [0, -2, 0.5],
        [5.2, -2, 0.5],
        [0, 2, 1]];

  for(i = 1, length(zs),
    z = zs[i];
    z_flare = true_to_hyp(z);
    print(z", "z_flare", "hyp_to_true(z_flare[1], z_flare[2], z_flare[3]));
    print(" ");
  );
}

test_init_eqns()=
{
  local(A, circles, z1, z2, t, pre_kappa, zs, s, alpha0, rho0, M1, M2);

  /* Some test z values */
  zs = vector(3);
  zs[1] = [0, 0, 1/10];
  zs[2] = [1/2, 0, 1];
  zs[3] = [0, -2, 1];

  /* Parameters */
  s = 0.4;
  M = 3;

  A = init_eqns(zs, s, M);
  default(realprecision, 2);
  for(i = 1, length(zs),
    print(A[i, 1..M^2]);
  );
  default(realprecision, 38);
}

test_test_points()=
{
  local(zs1, zs2, N, thet1, thet2, phi1, phi2);

  /* choose parameters */
  N = 15;
  thet1 = -3*Pi/4; thet2 = -3*Pi/4 + 0.01;
  phi1 = Pi/4; phi2 = Pi/4 + 0.01;

  /* form points */
  zs1 = test_points_ray(N, thet1, phi1);
  zs2 = test_points_ray(N, thet2, phi2);

  /* check admissibility */
  is_admissible(zs1);
  is_admissible(zs2);
}
