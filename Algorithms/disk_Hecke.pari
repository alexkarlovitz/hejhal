/* This file contains PARI code to run Hejhal's algorithm on a
   Hecke group with respect to the disk expansion.
   A lot of the code is borrowed from Andreas Strombergsson. */

/* We assume any Hecke group is generated by z |-> z+1 and
  z |-> -r^2/z. */

  /* Author: Alex Karlovitz */

/**********************************************************************
  Special function (from Strombergsson)
**********************************************************************/

/* See def in GR, 9.100. We sum up to and including the z^N-term.
 Chooses N by the following (completely ad hoc and sloppy heuristic)
 method: Stop when p has decreased >= 10 times in a row and |p|<re*|s|. */

hypergeom(a,b,c,z)=
{
  local(s,p,pp,n,r,re,prec);

  /* re: Desired relative error bound for hypergeom function.
     Let's make it correspond to current precision. */
  prec = default(realprecision);
  re = 10^(-prec);

  s=1;
  p=1;
  r=0;
  n=0;
  while(1,
    pp=(a+n)*(b+n)/((c+n)*(1+n))*z;
    if (abs(pp)<1, r++, r=0);
    p=p*pp;
    s+=p;
    if ((r>=10 && abs(p)<re*abs(s)), return(s););
    n++;
  );
  s;
}

/**********************************************************************
  Disk model functions
**********************************************************************/

/*
Map from upper half plane model to disk model.
  Note: this is the usual Cayley transform when r = 1. We use this different
  version to ensure that w |-> -w is in the Hecke group in the disk model.
*/
cayley_transform(z, r) =
{
  (z - r*I)/(z + r*I);
}

/* Map from disk model to upper half plane model */
inv_cayley_transform(w, r) =
{
  r*I*(1 + w)/(1 - w);
}

/**********************************************************************
  Whittaker function
**********************************************************************/

/* Whittaker function in the Fourier expansion in disk model */
disk_Whitt(rho, m, s)=
{
  (1 - rho^2)^s*rho^abs(m)*hypergeom(s, s + abs(m), 1 + abs(m), rho^2);
}

/**********************************************************************
  Hecke group functions
**********************************************************************/

/*
Pullback to fundamental domain |z| >= r and 0 <= Re(z) <= 1
*/
pullback_Hecke(z, r) =
{
  local(x, H);

  while(1,
  /* Find integer H such that -1/2 <= Re(z) + H <= 1/2.  */
    x = real(z);
    if(x < 0.5,
      H = truncate(0.5-x); z=z+H;,
      H = truncate(x+0.5); z=z-H;
    );
    if((real(z)^2 + imag(z)^2 >= r^2),
      if(real(z)<0,
        return(z+1),
        return(z)
      );,
      z=-r^2/z;
    );
  );
}

/*
Pullback to the fundamental domain in the disk which corresponds to the
fundamental domain |z| >= r and 0 <= Re(z) <= 1 in the upper half plane.
*/
pullback_Hecke_disk(w, r) =
{
  local(z, z_star);

  z = inv_cayley_transform(w, r);
  z_star = pullback_Hecke(z, r);
  cayley_transform(z_star, r);
}

/*
Creates set of N test points at height Y in [-1, -1/2), then returns
Cayley transform of these points.
  - Evenness of base eigenfunction means we only need half a horocycle.
*/
test_points_horocycle(N, Y, r)=
{
  local(zs);

  zs = vector(N);
  for(j = 1, N, zs[j] = cayley_transform(-1 + (j-1)/(2*(N)) + Y*I, r));
  return(zs);
}

/*
Creates set of N test points at radius Rho between angles thet1 and thet2.
*/
test_points_circle(N, Rho, thet1, thet2)=
{
  local(zs);

  zs = vector(N);
  for(j = 1, N, zs[j] = Rho*exp(I*(thet1 + j*(thet2 - thet1)/(N + 1))));
  return(zs);
}

/**********************************************************************
  Linear algebra algorithm (from Strombergsson)
**********************************************************************/

/*
 To utilize as much information as possible, we will typically be looking
 at a linear system with more equations than variables. In particular, we
 have a system of the type "A*x=0", where x is the sought for M-dimensional
 vector of Fourier coefficients, and A is an N*M-matrix where N>=M-1
 is the number of given points. Of course, since typically N should be
 much larger than M, it will be impossible to find an EXACT solution x
 to "A*x=0". Instead we seek x so as to MINIMIZE |A*x| (Euclidean norm).
 for some given normalization of x. Perhaps the most natural normalization
 of x would be |x|=1; however here we instead normalize by setting
 x[1]=1. Thus, since |A*x|^2=x^t*AA*x with AA:=A^t*A (an M*M-matrix), it
 turns out that we wish to find that vector x which satisfies x[1]=1 and
 AA'*x=0, where AA' is the (M-1)*M-matrix obtained by removing the top row
 from AA. We find this vector x using Gauss elimination, via solve_sys.
*/

/*
 The following routine solves a linear system of equations using
 Gauss elimination. Of course we could instead have tried to make
 use of some built-in PARI routine, but we wanted to have maximal
 control. Actually the routine below is a very downscaled version
 of a much longer routine, which e.g. allows a higher dimensional
 solution space (e.g. when looking for holomorphic modular forms)
 and also allows some "tricks", e.g. to have available more
 equations than are actually used in the end, so that in each new
 j-iteration we seek among more than one row to find a good pivot.
 (This is probably humbug to any expert in numerical linear algebra,
 but it has been found to work well in practice when dealing with a
 higher dimensional space of holomorphic modular forms.) Anyway,
 I have taken this away below since I doubt it would be useful for
 the problem we are now discussing.)
*/

/*
 Solve the homogeneous system of equations whose coefficients are
 given by AA using Gauss elimination.
 cfree is the index of the column which should be kept as a free variable.
*/
solve_sys(AA, cfree)=
{
  local(Nequ, Nu, c, maxc, maxk, columninfo, j, k, A, N, jj);

  /* get number of equations and variables */
  Nequ = matsize(AA)[2];
  Nu = matsize(AA[1])[2];

  /* We maintain  columninfo  so that
    columninfo[k] = j   if column k has been used as pivot column and
                          the corresponding "1" is in row j.
                  = -1  if column k has not yet been used as pivot. */
  columninfo=vector(Nu,k,-1);

  /* loop through rows */
  for(j=1,Nequ,
    /* Find the coefficient of largest absolute value in row number j. */
    maxc=0; maxk=-1;
    for(k=1,Nu, if((k!=cfree),
      c=abs(AA[j][k]); if((c>maxc), maxk=k; maxc=c;);
    ););
    if((maxk==-1), error("In solveequsyst; unexpected linear dependence "j););

    /* Divide all coefficients in row j  with  AA[j,maxk]. */
    A=1/AA[j][maxk];
    AA[j]=A*AA[j];
    AA[j][maxk]=1;    /* EXACT 1, not "1.000000000023", say! */

    /* Update columninfo. */
    columninfo[maxk]=j;

    /* Subtract row j from all other rows. */
    for(N=1,Nequ,
      if(N != j,
        A=AA[N][maxk];
        AA[N] = AA[N]-A*AA[j];
        AA[N][maxk]=0;   /* EXACT 0, not "0.0E-10", say! */
      );
    );
  );

  /* Return the solution vector. */
  vector(Nu, k, if(k==cfree, 1, -AA[columninfo[k]][cfree]));
}

/**********************************************************************
  Code for setting up and solving linear system
**********************************************************************/

/*
Sets up matrix of equations for list of test points z (using disk expansion)
  - r - Hecke group parameter
  - lambda = s(1 - s)
  - only use test point if it has radius <= rho0
  - M - number of nonzero coefficients to take in expansion
*/
init_eqns_disk(z, r, s, rho0, M)=
{
  local(j, zz, zjrth, m, a, B);

  /* every point in the vector z gives one equation */
  A = matrix(length(z), M + 1, x, y, 0);

  /* loop through all test points */
  for(j = 1, length(z),
    /* get pullback; error out if test point was already in fundamental domain */
    zz = pullback_Hecke_disk(z[j], r);
    if(abs(zz-z[j]) < 1e-10,
      error("Test point "j" already in fundamental domain: "z[j]);
    );

    /* error out if either point has radius > rho0 */
    if(abs(z[j]) > rho0,
      error("Test point "j" inadmissible: "z[j]);
    );
    if(abs(zz) > rho0,
      error("Pullback of test point "j" inadmissible: "zz);
    );

    /* add coefficients for test point and subtract coefficients for pullback */
    for(k=0, M,
      A[j, k+1] = disk_Whitt(abs(z[j]), 2*k, s)*cos(2*k*arg(z[j]));
      A[j, k+1] -= disk_Whitt(abs(zz), 2*k, s)*cos(2*k*arg(zz));
    );
  );
  return(A);
}

/*
Given a set of test points z, set up and solve linear system for the Fourier
coefficients. Assumes we are working with a Hecke group.
  - r - Hecke group parameter
  - s - assumed eigenvalue is lambda = s(1 - s)
  - only use disk expansion if test point has radius <= rho0
  - M - number of nonzero coefficients to take in expansion
*/
least_square_method_disk(z, r, s, rho0, M) =
{
  local(k, A, AA, B, x);

  /* Set up matrix of equations */
  A = init_eqns_disk(z, r, s, rho0, M);

  /* Use Strombergsson's method for least squares */
  AA = mattranspose(A)*A;
  /* TODO: MAYBE CHANGE THIS? SEEMS LIKE WE'RE IGNORING AN EQUATION... */
  B = vector(M, k, vector(M+1, j, AA[k+1, j]));
  x = solve_sys(B, 1);

  /* return Fourier coefficient vector */
  return(x);
}

/**********************************************************************
  Actual loops for Hejhal's algorithm
**********************************************************************/

/*
Runs a "secant method version" of Hejhal's algorithm (learned from
Strombergsson)
  - r - Hecke group parameter
  - we only use test points with radius <= rho0
  - M = number of nonzero points taken in expansion
  - s = starting guess
  - delta = starting step size away from guess
*/
secant_method(r, rho0, M, s, delta)=
{
  local(s_new, x1, x2, z1, z2, c1, c2, j, s_max, s_min, s_mid, delta_new);

  s_new=vector(4);

  while(1,

    /* Get differences of some Fourier coefficients for s */
    z1 = concat(test_points_circle(2*M, 1/2, 0, Pi/2), test_points_circle(2*M, 1/2, Pi, 3*Pi/2));
    z2 = concat(test_points_circle(2*M, 0.52, 0, Pi/2), test_points_circle(2*M, 0.52, Pi, 3*Pi/2));
    x1 = least_square_method_disk(z1, r, s, rho0, M);
    x2 = least_square_method_disk(z2, r, s, rho0, M);
    c1 = [x1[2] - x2[2], x1[3] - x2[3], x1[4] - x2[4], x1[5] - x2[5]];

    /* Now do the same for s + delta */
    x1 = least_square_method_disk(z1, r, s + delta, rho0, M);
    x2 = least_square_method_disk(z2, r, s + delta, rho0, M);
    c2 = [x1[2] - x2[2], x1[3] - x2[3], x1[4] - x2[4], x1[5] - x2[5]];

    /* Run one iteration of secant method on each difference */
    s_max = 0.0; s_min = 100.0;
    for(j = 1, 4,
      s_new[j] = (c1[j]*(s+delta) - c2[j]*s)/(c1[j] - c2[j]);
      s_max = max(s_max, s_new[j]);
      s_min = min(s_min, s_new[j]);
    );
    s_mid = 0.5*(s_max + s_min);

    /* Ad hoc check if it's worth continuing */
    delta_new = (s_max - s_min)*5;
    if(delta_new > 0.5*delta,
      return(s_mid);
    );
    delta = delta_new;
    s = s_mid-0.5*delta;
  );
}
