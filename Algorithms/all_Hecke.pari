/* This file contains PARI code to run Hejhal's algorithm on a
   Hecke group with respect to the cusp, flare, and disk expansions.
   That is, we split a fundamental domain into pieces in which
   a certain Fourier expansion is "best."
   A lot of the code is borrowed from Andreas Strombergsson. */

/* We assume any Hecke group is generated by z |-> z+1 and
  z |-> -r^2/z. */

  /* Author: Alex Karlovitz */

/**********************************************************************
  Special functions (from Strombergsson)
**********************************************************************/

/* See def in GR, 9.100. We sum up to and including the z^N-term.
 Chooses N by the following (completely ad hoc and sloppy heuristic)
 method: Stop when p has decreased >= 10 times in a row and |p|<re*|s|. */

hypergeom(a,b,c,z)=
{
  local(s,p,pp,n,r,re,prec);

  /* re: Desired relative error bound for hypergeom function.
     Let's make it correspond to current precision. */
  prec = default(realprecision);
  re = 10^(-prec);

  s=1;
  p=1;
  r=0;
  n=0;
  while(1,
    pp=(a+n)*(b+n)/((c+n)*(1+n))*z;
    if (abs(pp)<1, r++, r=0);
    p=p*pp;
    s+=p;
    if ((r>=10 && abs(p)<re*abs(s)), return(s););
    n++;
  );
  s;
}

/* Legendre function of the first kind, for -1<=x<=1.  */
/* See def in GR, 8.704.  */
Plegendre(mu,nu,x)=
{
  real(1/gamma(1-mu)*((1+x)/(1-x))^(mu/2)*hypergeom(-nu,nu+1,1-mu,(1-x)/2));
}

/**********************************************************************
  Disk model functions
**********************************************************************/

/*
Map from upper half plane model to disk model.
  Note: this is the usual Cayley transform when r = 1. We use this different
  version to ensure that w |-> -w is in the Hecke group in the disk model.
*/
cayley_transform(z, r) =
{
  (z - r*I)/(z + r*I);
}

/* Map from disk model to upper half plane model */
inv_cayley_transform(w, r) =
{
  r*I*(1 + w)/(1 - w);
}

/**********************************************************************
  Whittaker functions
**********************************************************************/

/* Whittaker function in the cuspidal expansion */
cusp_Whitt(y, m, nu)=
{
  sqrt(y)*real(besselk(nu, 2*Pi*m*y));
}

/* Whittaker function in the flare expansion */
flare_Whitt(thet, m, s, kappa)=
{
  sqrt(sin(thet))*Plegendre(0.5-s, -0.5+2*Pi*m*I/log(kappa), cos(thet));
}

/* Whittaker function in the Fourier expansion in disk model */
disk_Whitt(rho, m, s)=
{
  (1 - rho^2)^s*rho^abs(m)*hypergeom(s, s + abs(m), 1 + abs(m), rho^2);
}

/**********************************************************************
  Hecke group functions
**********************************************************************/

/*
Pullback to fundamental domain |z| >= r and 0 <= Re(z) <= 1
*/
pullback_Hecke(z, r)=
{
  local(x, H);

  while(1,
  /* Find integer H such that -1/2 <= Re(z) + H <= 1/2.  */
    x = real(z);
    if(x < 0.5,
      H = truncate(0.5-x); z=z+H;,
      H = truncate(x+0.5); z=z-H;
    );
    if((real(z)^2 + imag(z)^2 >= r^2),
      if(real(z)<0,
        return(z+1),
        return(z)
      );,
      z=-r^2/z;
    );
  );
}

/*
Pullback to the fundamental domain in the disk which corresponds to the
fundamental domain |z| >= r and 0 <= Re(z) <= 1 in the upper half plane.
*/
pullback_Hecke_disk(w, r) =
{
  local(z, z_star);

  z = inv_cayley_transform(w, r);
  z_star = pullback_Hecke(z, r);
  cayley_transform(z_star, r);
}

/*
Map from flare domain to original domain
*/
hyp_to_true(r, th, rho) =
{
  local(w,z1,z2,c);

  z1=(1/2)*(1-sqrt(1-4*r^2));   z2=(1/2)*(1+sqrt(1-4*r^2));
  c=(r-z2)/(r-z1);
  w=rho*exp(th*I);
  (z2*w-c*z1)/(w-c);
}

/*
Map from original domain to flare domain
*/
true_to_hyp(r, z)=
{
  local(w,z1,z2,c);

  z1=(1/2)*(1-sqrt(1-4*r^2));   z2=(1/2)*(1+sqrt(1-4*r^2));
  c=(r-z2)/(r-z1);
  w=c*(z-z1)/(z-z2);
  [abs(w),arg(w)];
}

/**********************************************************************
  Linear algebra algorithm (from Strombergsson)
**********************************************************************/

/*
 To utilize as much information as possible, we will typically be looking
 at a linear system with more equations than variables. In particular, we
 have a system of the type "A*x=0", where x is the sought for M-dimensional
 vector of Fourier coefficients, and A is an N*M-matrix where N>=M-1
 is the number of given points. Of course, since typically N should be
 much larger than M, it will be impossible to find an EXACT solution x
 to "A*x=0". Instead we seek x so as to MINIMIZE |A*x| (Euclidean norm).
 for some given normalization of x. Perhaps the most natural normalization
 of x would be |x|=1; however here we instead normalize by setting
 x[1]=1. Thus, since |A*x|^2=x^t*AA*x with AA:=A^t*A (an M*M-matrix), it
 turns out that we wish to find that vector x which satisfies x[1]=1 and
 AA'*x=0, where AA' is the (M-1)*M-matrix obtained by removing the top row
 from AA. We find this vector x using Gauss elimination, via solve_sys.
*/

/*
 The following routine solves a linear system of equations using
 Gauss elimination. Of course we could instead have tried to make
 use of some built-in PARI routine, but we wanted to have maximal
 control. Actually the routine below is a very downscaled version
 of a much longer routine, which e.g. allows a higher dimensional
 solution space (e.g. when looking for holomorphic modular forms)
 and also allows some "tricks", e.g. to have available more
 equations than are actually used in the end, so that in each new
 j-iteration we seek among more than one row to find a good pivot.
 (This is probably humbug to any expert in numerical linear algebra,
 but it has been found to work well in practice when dealing with a
 higher dimensional space of holomorphic modular forms.) Anyway,
 I have taken this away below since I doubt it would be useful for
 the problem we are now discussing.)
*/

/*
 Solve the homogeneous system of equations whose coefficients are
 given by AA using Gauss elimination.
 cfree is the index of the column which should be kept as a free variable.
*/
solve_sys(AA, cfree)=
{
  local(Nequ, Nu, c, maxc, maxk, columninfo, j, k, A, N, jj);

  /* get number of equations and variables */
  Nequ = matsize(AA)[2];
  Nu = matsize(AA[1])[2];

  /* We maintain  columninfo  so that
    columninfo[k] = j   if column k has been used as pivot column and
                          the corresponding "1" is in row j.
                  = -1  if column k has not yet been used as pivot. */
  columninfo=vector(Nu,k,-1);

  /* loop through rows */
  for(j=1,Nequ,
    /* Find the coefficient of largest absolute value in row number j. */
    maxc=0; maxk=-1;
    for(k=1,Nu, if((k!=cfree),
      c=abs(AA[j][k]); if((c>maxc), maxk=k; maxc=c;);
    ););
    if((maxk==-1), error("In solveequsyst; unexpected linear dependence "j););

    /* Divide all coefficients in row j  with  AA[j,maxk]. */
    A=1/AA[j][maxk];
    AA[j]=A*AA[j];
    AA[j][maxk]=1;    /* EXACT 1, not "1.000000000023", say! */

    /* Update columninfo. */
    columninfo[maxk]=j;

    /* Subtract row j from all other rows. */
    for(N=1,Nequ,
      if(N != j,
        A=AA[N][maxk];
        AA[N] = AA[N]-A*AA[j];
        AA[N][maxk]=0;   /* EXACT 0, not "0.0E-10", say! */
      );
    );
  );

  /* Return the solution vector. */
  vector(Nu, k, if(k==cfree, 1, -AA[columninfo[k]][cfree]));
}

/**********************************************************************
  Code for setting up and solving linear system
**********************************************************************/

/*
Sets up matrix of equations for list of test points z
  - use cusp, flare, and disk expansions
    - if test point is in fundamental domain, compare admissible expansions
      to each other
    - else, compare admissible expansions at test point to admissible
      expansion at pullback
  - r - Hecke group parameter
  - lambda = s(1 - s)
  - only use cuspidal expansion if test point has height >= y0
  - only use flare expansion if test point has argument <= alpha0
  - only use disk expansion if test point has radius <= rho0
  - M1 - number of nonzero coefficients to take in cuspidal expansion
  - M2 - number of nonzero coefficients to take in flare expansion
  - M3 - number of nonzero coefficients to take in disk expansion
*/
init_eqns_all(zs, r, s, y0, alpha0, rho0, M1, M2, M3)=
{
  local(num_eqns, j, z, zpb, z_flare, zpb_flare, z_disk,
        zpb_disk, kappa, zrepr, m, point_adml, pullback_adml, B);

  /* kappa is the scaling parameter for the flare */
  kappa = ((1+sqrt(1-4*r^2))/(2*r))^2;

  /* every point in the vector z may give up to 3 equations
     - rows of A correspond to equations
     - cols correspond to coefficients
       - cols 1, ..., M1+1 are for cuspidal expansion
       - cols M1+2,..., M1+M2+2 are for flare expansion
       - cols M1+M2+3,..., M1+M2+M3+3 are for disk expansion */
  A = vector(3*length(zs), x, vector(M1+M2+M3+3));

  /* loop through all test points, keeping track of how many equations */
  num_eqns = 1;
  for(j = 1, length(zs),
    /* get pullback, then corresponding flare/disk points */
    z = zs[j];
    zpb = pullback_Hecke(z, r);
    z_flare = true_to_hyp(r, z);
    zpb_flare = true_to_hyp(r, zpb);
    z_disk = cayley_transform(z, r);
    zpb_disk = cayley_transform(zpb, r);

    /* Number of ways to represent z[j]; better be 1, 2, or 3! */
    zrepr = 0;

    /* Check whether point is in fundamental domain */
    if(abs(zpb - z) < 1e-10,

      /* Point is IN fundamental domain */

      /* If in cusp, check other expansions */
      if(imag(z) >= y0,

        /* Check flare expansion */
        if(z_flare[2] <= alpha0,

          /* Add equation comparing cusp to flare */
          A[num_eqns + zrepr][1] = imag(z)^(1-s);
          for(m = 1, M1, A[num_eqns + zrepr][m + 1] = cusp_Whitt(imag(z), m, s - 0.5)*cos(2*Pi*m*real(z)));
          for(m = 0, M2, A[num_eqns + zrepr][M1 + 2 + m] = -flare_Whitt(z_flare[2], m, s, kappa)*cos(2*Pi*m*log(z_flare[1])/log(kappa)));
          zrepr += 1;
        );

        /* Check disk expansion */
        if(abs(z_disk) <= rho0,

          /* Add equation comparing cusp to disk */
          A[num_eqns + zrepr][1] = imag(z)^(1-s);
          for(m = 1, M1, A[num_eqns + zrepr][m + 1] = cusp_Whitt(imag(z), m, s - 0.5)*cos(2*Pi*m*real(z)));
          for(m = 0, M3, A[num_eqns + zrepr][M1 + M2 + 3 + m] = -disk_Whitt(abs(z_disk), 2*m, s)*cos(2*m*arg(z_disk)));
          zrepr += 1;
        );
      );

      /* Don't need any more if we already have 2 equations */
      if(zrepr != 2,
        /* If in flare, check disk */
        if(z_flare[2] <= alpha0,

          /* Check disk expansion */
          if(abs(z_disk) <= rho0,
            for(m = 0, M2, A[num_eqns + zrepr][M1 + 2 + m] = flare_Whitt(z_flare[2], m, s, kappa)*cos(2*Pi*m*log(z_flare[1])/log(kappa)));
            for(m = 0, M3, A[num_eqns + zrepr][M1 + M2 + 3 + m] = -disk_Whitt(abs(z_disk), 2*m, s)*cos(2*m*arg(z_disk)));
            zrepr += 1;
          );
        );
      );

      /* If point didn't give any equations, error out */
      if(zrepr == 0, error("Point "z" in fundamental domain but admissible for < 2 expansions."));
      ,

      /* Point is NOT IN fundamental domain */
      point_adml = 0;
      pullback_adml = 0;

      /* Check if point admissible wrt cusp */
      if(imag(z) >= y0,
        point_adml = 1;

        /* Use cusp expansion for z */
        A[num_eqns + zrepr][1] = imag(z)^(1 - s);
        for(m = 1, M1, A[num_eqns + zrepr][m + 1] +=
            cusp_Whitt(imag(z), m, s - 0.5)*cos(2*Pi*m*real(z)));
      );

      /* Check if pullback admissible wrt cusp */
      if(imag(zpb) >= y0,
        pullback_adml = 1;

        /* Use cusp expansion for pullback */
        A[num_eqns + zrepr][1] -= imag(zpb)^(1 - s);
        for(m = 1, M1, A[num_eqns + zrepr][m + 1] -=
            cusp_Whitt(imag(zpb), m, s - 0.5)*cos(2*Pi*m*real(zpb)));
      );

      /* Check if point admissible wrt flare */
      if(point_adml == 0,
        if(z_flare[2] <= alpha0,
          /* Use flare expansion for z */
          for(m = 0, M2, A[num_eqns + zrepr][M1 + 2 + m] +=
              flare_Whitt(z_flare[2], m, s, kappa)*cos(2*Pi*m*log(z_flare[1])/log(kappa)));
              point_adml = 1;
        );
      );

      /* Check if pullback admissible wrt flare */
      if(pullback_adml == 0,
        if(zpb_flare[2] <= alpha0,
          /* Use flare expansion for pullback */
          for(m = 0, M2, A[num_eqns + zrepr][M1 + 2 + m] -=
              flare_Whitt(zpb_flare[2], m, s, kappa)*cos(2*Pi*m*log(zpb_flare[1])/log(kappa)));
              pullback_adml = 1;
        );
      );

      /* Check if point admissible wrt disk */
      if(point_adml == 0,
        if(abs(z_disk) <= rho0,
          /* Use disk expansion for z */
          for(m = 0, M3, A[num_eqns + zrepr][M1 + M2 + 3 + m] +=
              disk_Whitt(abs(z_disk), 2*m, s)*cos(2*m*arg(z_disk)));
              point_adml = 1;
        );
      );

      /* Check if pullback admissible wrt disk */
      if(pullback_adml == 0,
        if(abs(zpb_disk) <= rho0,
          /* Use disk expansion for pullback */
          for(m = 0, M3, A[num_eqns + zrepr][M1 + M2 + 3 + m] -=
              disk_Whitt(abs(zpb_disk), 2*m, s)*cos(2*m*arg(zpb_disk)));
              pullback_adml = 1;
        );
      );

      /* If point didn't give any equations, error out */
      if(point_adml == 0, error("Point "z" has no admissible expansion."));
      if(pullback_adml == 0, error("Pullback "z" has no admissible expansion."));
      zrepr = 1;
    );

    num_eqns += zrepr;
  );
  /* return matrix, but only use rows which got an equation filled in */
  num_eqns = num_eqns-1;
  B = matrix(num_eqns, M1 + M2 + M3 + 3, k, j, A[k][j]);
  return(B);
}

/*
Given a set of test points z, set up and solve linear system for the Fourier
coefficients. Assumes we are working with an infinite volume Hecke group.
  - r - Hecke group parameter
  - s - assumed eigenvalue is lambda = s(1 - s)
  - only use cuspidal expansion if test point has height >= y0
  - only use flare expansion if test point has argument <= alpha0
  - only use disk expansion if test point has radius <= rho0
  - M1 - number of nonzero coefficients to take in cuspidal expansion
  - M2 - number of nonzero coefficients to take in flare expansion
  - M3 - number of nonzero coefficients to take in disk expansion
*/
get_coefficients_all(z, r, s, y0, alpha0, rho0, M1, M2, M3) =
{
  /* double check that group has infinite volume */
  if(r >= 1, error("Group must have infinite volume to use flare expansion."));

  local(k, A, AA, B, x);

  /* Set up matrix of equations */
  A = init_eqns_all(z, r, s, y0, alpha0, rho0, M1, M2, M3);

  /* Use Strombergsson's method for least squares */
  AA = mattranspose(A)*A;
  B = vector(M1+M2+M3+2, k, vector(M1+M2+M3+3, j, AA[k+1, j]));
  x = solve_sys(B, 1);

  /* return Fourier coefficient vector */
  return(x);
}

/**********************************************************************
  Actual loops for Hejhal's algorithm
**********************************************************************/

/*
Runs a "secant method version" of Hejhal's algorithm (learned from
Strombergsson)
  - r - Hecke group parameter
  - we only use cuspidal expansion when test point has height >= y0
  - we only use flare expansion when test point has argument <= alpha0
  - only use disk expansion if test point has radius <= rho0
  - M1 - number of nonzero coefficients to take in cuspidal expansion
  - M2 - number of nonzero coefficients to take in flare expansion
  - M3 - number of nonzero coefficients to take in disk expansion
  - s = starting guess
  - delta = starting step size away from guess
*/
secant_method(z1, z2, r, y0, alpha0, rho0, M1, M2, M3, s, delta)=
{
  local(s_new, c1, c2, j, s_max, s_min, s_mid, delta_new);

  s_new=vector(4); /* REMEMBER TO CHANGE THIS IF YOU CHANGE C1 AND C2 */

  while(1,

    /* Get differences of some Fourier coefficients for s */
    x1 = get_coefficients_all(z1, r, s, y0, alpha0, rho0, M1, M2, M3);
    x2 = get_coefficients_all(z2, r, s, y0, alpha0, rho0, M1, M2, M3);
    c1 = [x1[2] - x2[2], x1[3] - x2[3], x1[M1+2] - x2[M1+2], x1[M1+M2+3] - x2[M1+M2+3]];

    /* Now do the same for s + delta */
    x1 = get_coefficients_all(z1, r, s+delta, y0, alpha0, rho0, M1, M2, M3);
    x2 = get_coefficients_all(z2, r, s+delta, y0-0.02, alpha0+0.05, rho0-0.02, M1, M2, M3);
    c2 = [x1[2] - x2[2], x1[3] - x2[3], x1[M1+2] - x2[M1+2], x1[M1+M2+3] - x2[M1+M2+3]];

    /* Run one iteration of secant method on each difference */
    s_max = 0.0; s_min = 100.0;
    for(j = 1, length(c1),
      s_new[j] = (c1[j]*(s+delta) - c2[j]*s)/(c1[j] - c2[j]);
      s_max = max(s_max, s_new[j]);
      s_min = min(s_min, s_new[j]);
    );
    s_mid = 0.5*(s_max + s_min);

    /* Uncomment if you want to print current predictions */
    print("--------------------------------------");
    print("Current predictions:");
    for(j = 1, length(c1), print(s_new[j]));
    print(" ");

    /* Ad hoc check if it's worth continuing */
    delta_new = (s_max - s_min)*5;
    if(delta_new > 0.5*delta,
      print("Approximate error:"s_max-s_min);
      return(s_mid);
    );
    delta = delta_new;
    s = s_mid-0.5*delta;
  );
}

/*
Use Hejhal's original zoom in method: search for s in a grid of points,
then look at continually finer grids at best test points.
Get best based on minimum error in Fourier coefficients between two
sets of test points.
*/
grid_zoom_in(z1, z2, r, y0, alpha0, rho0, M1, M2, M3, s_start, grid_size_start, num_steps)=
{
  local(best_s, grid_size, s_list, error_list, R, idx);

  best_s = s_start;
  grid_size = grid_size_start;

  /* repeat process for num_steps */
  for(i = 1, num_steps,
    /* print best s so far */
    print("Current guess: s = "best_s);

    /* get list of guesses */
    s_list = vector(11, n, best_s - 5*grid_size + (n-1)*grid_size);
    error_list = vector(11, n, 0);

    /* loop through grid of s values */
    for(j = 1, 11,
      /* get two sets of coefficients  and store error */
      x1 = get_coefficients_all(z1, r, s_list[j], y0, alpha0, rho0, M1, M2, M3);
      x2 = get_coefficients_all(z2, r, s_list[j], y0, alpha0, rho0, M1, M2, M3);
      error_list[j] = norml2(x1 - x2);
    );

    /* print list of s values and corresponding errors */
    /*print("s guesses: "s_list);
    print("errors: "error_list);*/

    /* get s with minimum error to search near */
    vecmin(error_list, &idx);
    best_s = s_list[idx];

    /* update grid size */
    grid_size = grid_size*0.1;
  );

  return(best_s);
}
