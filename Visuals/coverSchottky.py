from __future__ import division
import numpy as np
import matplotlib.pyplot as plt
import diskModel as dm

'''
This file contains functions for visualizing the triple cover of a symmetric
Schottky group generated by 3 reflections. The cover is obtained by including
rotation by 2pi/3 as a group element.
'''

# draws a fundamental domain in the disk for the group generated by
#   - one circle from the symmetric Schottky group with 3 circles of angle
#     thet (we use the rightmost circle, symmetric across the real axis)
#   - two reflections across diameters which compose to obtain rotation by
#     2pi/3 (we use the real line and the rotation of that by pi/3)
def draw_reflection_group(thet) :
    # form the geodesics
    R = dm.Geodesic(np.exp(1j*thet/2), np.exp(-1j*thet/2))
    D1 = dm.Geodesic(np.exp(1j*np.pi/3), -np.exp(1j*np.pi/3))
    D2 = dm.Geodesic(-1, 1)

    # form the fundamental domain with an appropriate reference point
    fd = dm.FundamentalDomain([R, D1, D2], 0.1 + 1j*0.1)

    # plot it!
    ax = dm.setupFig()
    fd.draw(ax)

    # label geodesics
    plt.text(np.cos(thet/2) + 0.02, np.sin(thet/2) + 0.02, '$R$', fontsize=12)
    plt.text(0.52, 0.88, '$D_1$', fontsize=12)
    plt.text(1.02, 0, '$D_2$', fontsize=12)

    plt.axis('off')
    plt.show()

def draw_doubled_group(thet) :
    # form the geodesics for the fundamental domain
    R = dm.Geodesic(np.exp(1j*thet/2), np.exp(-1j*thet/2))
    D1R = dm.Geodesic(np.exp(1j*(2*np.pi/3 - thet/2)), np.exp(1j*(2*np.pi/3 + thet/2)))
    D2 = dm.Geodesic(-1, 1)
    D1D2 = dm.Geodesic(np.exp(1j*2*np.pi/3), -np.exp(1j*2*np.pi/3))

    # form the fundamental domain with an appropriate reference point
    fd = dm.FundamentalDomain([R, D1R, D2, D1D2], 0.6 + 1j*0.6)

    # we'll also plot D1 as a dashed line
    D1 = dm.Geodesic(np.exp(1j*np.pi/3), -np.exp(1j*np.pi/3))

    # plot stuff!
    ax = dm.setupFig()
    fd.draw(ax)
    D1.draw(ax, lstyle='--')

    # label geodesics
    plt.text(np.cos(thet/2) + 0.02, np.sin(thet/2) + 0.02, '$R$', fontsize=12)
    plt.text(0.52, 0.88, '$D_1$', fontsize=12)
    plt.text(1.02, 0, '$D_2$', fontsize=12)
    plt.text(np.cos(2*np.pi/3 - thet/2), np.sin(2*np.pi/3 - thet/2) + 0.02, '$D_1(R)$', fontsize=12)
    plt.text(-0.56, 0.94, '$D_1(D_2)$', fontsize=12)

    plt.axis('off')
    plt.show()

if __name__ == '__main__' :
    draw_doubled_group(np.pi/2)
